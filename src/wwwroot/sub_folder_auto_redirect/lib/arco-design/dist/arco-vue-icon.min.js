var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
!function(e, t) {
  typeof exports == "object" && typeof module != "undefined" ? module.exports = t(require("vue")) : typeof define == "function" && define.amd ? define(["vue"], t) : (e = typeof globalThis != "undefined" ? globalThis : e || self).ArcoVueIcon = t(e.Vue);
}(this, function(e) {
  "use strict";
  const t = Symbol("ArcoConfigProvider"), n = (n2) => {
    var _a2, _b2, _c2, _d2;
    const o2 = e.getCurrentInstance(), r2 = (_d2 = (_c2 = (_a2 = e.inject(t, void 0)) == null ? void 0 : _a2.prefixCls) != null ? _c2 : (_b2 = o2 == null ? void 0 : o2.appContext.config.globalProperties.$arco) == null ? void 0 : _b2.classPrefix) != null ? _d2 : "arco";
    return n2 ? `${r2}-${n2}` : r2;
  };
  var o = (e2, t2) => {
    for (const [n2, o2] of t2)
      e2[n2] = o2;
    return e2;
  };
  const r = e.defineComponent({ name: "IconArrowDown", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-arrow-down`, { [`${o2}-spin`]: t2.spin }]) };
  } }), i = ["stroke-width", "stroke-linecap", "stroke-linejoin"], s = [e.createElementVNode("path", { d: "m11.27 27.728 12.727 12.728 12.728-12.728M24 5v34.295" }, null, -1)];
  var l = o(r, [["render", function(t2, n2, o2, r2, l2, c2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, s, 10, i);
  }]]);
  const c = Object.assign(l, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + l.name, l);
  } }), a = e.defineComponent({ name: "IconArrowFall", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-arrow-fall`, { [`${o2}-spin`]: t2.spin }]) };
  } }), p = ["stroke-width", "stroke-linecap", "stroke-linejoin"], d = [e.createElementVNode("path", { d: "M24.008 41.99a.01.01 0 0 1-.016 0l-9.978-11.974A.01.01 0 0 1 14.02 30H33.98a.01.01 0 0 1 .007.016l-9.978 11.975Z" }, null, -1), e.createElementVNode("path", { d: "M24 42 14 30h20L24 42Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M22 6h4v26h-4z" }, null, -1), e.createElementVNode("path", { fill: "currentColor", stroke: "none", d: "M22 6h4v26h-4z" }, null, -1)];
  var u = o(a, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, d, 10, p);
  }]]);
  const k = Object.assign(u, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + u.name, u);
  } }), m = e.defineComponent({ name: "IconArrowLeft", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-arrow-left`, { [`${o2}-spin`]: t2.spin }]) };
  } }), v = ["stroke-width", "stroke-linecap", "stroke-linejoin"], h = [e.createElementVNode("path", { d: "M20.272 11.27 7.544 23.998l12.728 12.728M43 24H8.705" }, null, -1)];
  var f = o(m, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, h, 10, v);
  }]]);
  const w = Object.assign(f, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + f.name, f);
  } }), g = e.defineComponent({ name: "IconArrowRight", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-arrow-right`, { [`${o2}-spin`]: t2.spin }]) };
  } }), b = ["stroke-width", "stroke-linecap", "stroke-linejoin"], j = [e.createElementVNode("path", { d: "m27.728 11.27 12.728 12.728-12.728 12.728M5 24h34.295" }, null, -1)];
  var L = o(g, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, j, 10, b);
  }]]);
  const B = Object.assign(L, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + L.name, L);
  } }), C = e.defineComponent({ name: "IconArrowRise", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-arrow-rise`, { [`${o2}-spin`]: t2.spin }]) };
  } }), y = ["stroke-width", "stroke-linecap", "stroke-linejoin"], x = [e.createElementVNode("path", { d: "M23.992 6.01a.01.01 0 0 1 .016 0l9.978 11.974a.01.01 0 0 1-.007.016H14.02a.01.01 0 0 1-.007-.016l9.978-11.975Z" }, null, -1), e.createElementVNode("path", { d: "m24 6 10 12H14L24 6Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M26 42h-4V16h4z" }, null, -1), e.createElementVNode("path", { fill: "currentColor", stroke: "none", d: "M26 42h-4V16h4z" }, null, -1)];
  var E = o(C, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, x, 10, y);
  }]]);
  const S = Object.assign(E, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + E.name, E);
  } }), M = e.defineComponent({ name: "IconArrowUp", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-arrow-up`, { [`${o2}-spin`]: t2.spin }]) };
  } }), N = ["stroke-width", "stroke-linecap", "stroke-linejoin"], V = [e.createElementVNode("path", { d: "M11.27 20.272 23.997 7.544l12.728 12.728M24 43V8.705" }, null, -1)];
  var I = o(M, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, V, 10, N);
  }]]);
  const W = Object.assign(I, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + I.name, I);
  } }), $ = e.defineComponent({ name: "IconCaretDown", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-caret-down`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Z = ["stroke-width", "stroke-linecap", "stroke-linejoin"], z = [e.createElementVNode("path", { d: "M24.938 34.829a1.2 1.2 0 0 1-1.875 0L9.56 17.949c-.628-.785-.069-1.949.937-1.949h27.007c1.006 0 1.565 1.164.937 1.95L24.937 34.829Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var P = o($, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, z, 10, Z);
  }]]);
  const q = Object.assign(P, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + P.name, P);
  } }), O = e.defineComponent({ name: "IconCaretLeft", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-caret-left`, { [`${o2}-spin`]: t2.spin }]) };
  } }), H = ["stroke-width", "stroke-linecap", "stroke-linejoin"], F = [e.createElementVNode("path", { d: "M13.171 24.937a1.2 1.2 0 0 1 0-1.874L30.051 9.56c.785-.629 1.949-.07 1.949.937v27.006c0 1.006-1.164 1.566-1.95.937L13.171 24.937Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var A = o(O, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, F, 10, H);
  }]]);
  const D = Object.assign(A, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + A.name, A);
  } }), R = e.defineComponent({ name: "IconCaretRight", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-caret-right`, { [`${o2}-spin`]: t2.spin }]) };
  } }), T = ["stroke-width", "stroke-linecap", "stroke-linejoin"], U = [e.createElementVNode("path", { d: "M34.829 23.063c.6.48.6 1.394 0 1.874L17.949 38.44c-.785.629-1.949.07-1.949-.937V10.497c0-1.007 1.164-1.566 1.95-.937l16.879 13.503Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Q = o(R, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, U, 10, T);
  }]]);
  const G = Object.assign(Q, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Q.name, Q);
  } }), X = e.defineComponent({ name: "IconCaretUp", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-caret-up`, { [`${o2}-spin`]: t2.spin }]) };
  } }), J = ["stroke-width", "stroke-linecap", "stroke-linejoin"], K = [e.createElementVNode("path", { d: "M23.063 13.171a1.2 1.2 0 0 1 1.875 0l13.503 16.88c.628.785.069 1.949-.937 1.949H10.497c-1.006 0-1.565-1.164-.937-1.95l13.503-16.879Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Y = o(X, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, K, 10, J);
  }]]);
  const _ = Object.assign(Y, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Y.name, Y);
  } }), ee = e.defineComponent({ name: "IconDoubleDown", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-double-down`, { [`${o2}-spin`]: t2.spin }]) };
  } }), te = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ne = [e.createElementVNode("path", { d: "m9.9 11.142 14.143 14.142 14.142-14.142M9.9 22.456l14.143 14.142 14.142-14.142" }, null, -1)];
  var oe = o(ee, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ne, 10, te);
  }]]);
  const re = Object.assign(oe, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + oe.name, oe);
  } }), ie = e.defineComponent({ name: "IconDoubleLeft", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-double-left`, { [`${o2}-spin`]: t2.spin }]) };
  } }), se = ["stroke-width", "stroke-linecap", "stroke-linejoin"], le = [e.createElementVNode("path", { d: "M36.857 9.9 22.715 24.042l14.142 14.142M25.544 9.9 11.402 24.042l14.142 14.142" }, null, -1)];
  var ce = o(ie, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, le, 10, se);
  }]]);
  const ae = Object.assign(ce, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ce.name, ce);
  } }), pe = e.defineComponent({ name: "IconDoubleRight", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-double-right`, { [`${o2}-spin`]: t2.spin }]) };
  } }), de = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ue = [e.createElementVNode("path", { d: "m11.143 38.1 14.142-14.142L11.143 9.816M22.456 38.1l14.142-14.142L22.456 9.816" }, null, -1)];
  var ke = o(pe, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ue, 10, de);
  }]]);
  const me = Object.assign(ke, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ke.name, ke);
  } }), ve = e.defineComponent({ name: "IconDoubleUp", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-double-up`, { [`${o2}-spin`]: t2.spin }]) };
  } }), he = ["stroke-width", "stroke-linecap", "stroke-linejoin"], fe = [e.createElementVNode("path", { d: "M38.1 36.858 23.957 22.716 9.816 36.858M38.1 25.544 23.957 11.402 9.816 25.544" }, null, -1)];
  var we = o(ve, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, fe, 10, he);
  }]]);
  const ge = Object.assign(we, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + we.name, we);
  } }), be = e.defineComponent({ name: "IconDownCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-down-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), je = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Le = [e.createElementVNode("circle", { cx: "24", cy: "24", r: "18", transform: "rotate(-180 24 24)" }, null, -1), e.createElementVNode("path", { d: "M32.484 20.515 24 29l-8.485-8.485" }, null, -1)];
  var Be = o(be, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Le, 10, je);
  }]]);
  const Ce = Object.assign(Be, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Be.name, Be);
  } }), ye = e.defineComponent({ name: "IconDown", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-down`, { [`${o2}-spin`]: t2.spin }]) };
  } }), xe = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ee = [e.createElementVNode("path", { d: "M39.6 17.443 24.043 33 8.487 17.443" }, null, -1)];
  var Se = o(ye, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ee, 10, xe);
  }]]);
  const Me = Object.assign(Se, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Se.name, Se);
  } }), Ne = e.defineComponent({ name: "IconDragArrow", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-drag-arrow`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ve = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ie = [e.createElementVNode("path", { d: "M7 24h34M24 7v34M30 12l-6-6-6 6M36 30l6-6-6-6M12 30l-6-6 6-6M18 36l6 6 6-6" }, null, -1)];
  var We = o(Ne, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ie, 10, Ve);
  }]]);
  const $e = Object.assign(We, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + We.name, We);
  } }), Ze = e.defineComponent({ name: "IconExpand", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-expand`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ze = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Pe = [e.createElementVNode("path", { d: "M7 26v14c0 .552.444 1 .996 1H22m19-19V8c0-.552-.444-1-.996-1H26" }, null, -1)];
  var qe = o(Ze, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Pe, 10, ze);
  }]]);
  const Oe = Object.assign(qe, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + qe.name, qe);
  } }), He = e.defineComponent({ name: "IconLeftCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-left-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Fe = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ae = [e.createElementVNode("circle", { cx: "24", cy: "24", r: "18" }, null, -1), e.createElementVNode("path", { d: "M28.485 32.485 20 24l8.485-8.485" }, null, -1)];
  var De = o(He, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ae, 10, Fe);
  }]]);
  const Re = Object.assign(De, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + De.name, De);
  } }), Te = e.defineComponent({ name: "IconLeft", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-left`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ue = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Qe = [e.createElementVNode("path", { d: "M32 8.4 16.444 23.956 32 39.513" }, null, -1)];
  var Ge = o(Te, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Qe, 10, Ue);
  }]]);
  const Xe = Object.assign(Ge, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ge.name, Ge);
  } }), Je = e.defineComponent({ name: "IconMenuFold", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-menu-fold`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ke = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ye = [e.createElementVNode("path", { d: "M42 11H6M42 24H22M42 37H6M13.66 26.912l-4.82-3.118 4.82-3.118v6.236Z" }, null, -1)];
  var _e = o(Je, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ye, 10, Ke);
  }]]);
  const et = Object.assign(_e, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + _e.name, _e);
  } }), tt = e.defineComponent({ name: "IconMenuUnfold", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-menu-unfold`, { [`${o2}-spin`]: t2.spin }]) };
  } }), nt = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ot = [e.createElementVNode("path", { d: "M6 11h36M22 24h20M6 37h36M8 20.882 12.819 24 8 27.118v-6.236Z" }, null, -1)];
  var rt = o(tt, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ot, 10, nt);
  }]]);
  const it = Object.assign(rt, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + rt.name, rt);
  } }), st = e.defineComponent({ name: "IconRightCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-right-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), lt = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ct = [e.createElementVNode("circle", { cx: "24", cy: "24", r: "18" }, null, -1), e.createElementVNode("path", { d: "M19.485 15.515 27.971 24l-8.486 8.485" }, null, -1)];
  var at = o(st, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ct, 10, lt);
  }]]);
  const pt = Object.assign(at, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + at.name, at);
  } }), dt = e.defineComponent({ name: "IconRight", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-right`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ut = ["stroke-width", "stroke-linecap", "stroke-linejoin"], kt = [e.createElementVNode("path", { d: "m16 39.513 15.556-15.557L16 8.4" }, null, -1)];
  var mt = o(dt, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, kt, 10, ut);
  }]]);
  const vt = Object.assign(mt, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + mt.name, mt);
  } }), ht = e.defineComponent({ name: "IconRotateLeft", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-rotate-left`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ft = ["stroke-width", "stroke-linecap", "stroke-linejoin"], wt = [e.createElementVNode("path", { d: "M10 22a1 1 0 0 1 1-1h20a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H11a1 1 0 0 1-1-1V22ZM23 11h11a6 6 0 0 1 6 6v6M22.5 12.893 19.587 11 22.5 9.107v3.786Z" }, null, -1)];
  var gt = o(ht, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, wt, 10, ft);
  }]]);
  const bt = Object.assign(gt, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + gt.name, gt);
  } }), jt = e.defineComponent({ name: "IconRotateRight", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-rotate-right`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Lt = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Bt = [e.createElementVNode("path", { d: "M38 22a1 1 0 0 0-1-1H17a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h20a1 1 0 0 0 1-1V22ZM25 11H14a6 6 0 0 0-6 6v6M25.5 12.893 28.413 11 25.5 9.107v3.786Z" }, null, -1)];
  var Ct = o(jt, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Bt, 10, Lt);
  }]]);
  const yt = Object.assign(Ct, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ct.name, Ct);
  } }), xt = e.defineComponent({ name: "IconShrink", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-shrink`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Et = ["stroke-width", "stroke-linecap", "stroke-linejoin"], St = [e.createElementVNode("path", { d: "M20 44V29c0-.552-.444-1-.996-1H4M28 4v15c0 .552.444 1 .996 1H44" }, null, -1)];
  var Mt = o(xt, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, St, 10, Et);
  }]]);
  const Nt = Object.assign(Mt, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Mt.name, Mt);
  } }), Vt = e.defineComponent({ name: "IconSwap", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-swap`, { [`${o2}-spin`]: t2.spin }]) };
  } }), It = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Wt = [e.createElementVNode("path", { d: "M5 17h35.586c.89 0 1.337-1.077.707-1.707L33 7M43 31H7.414c-.89 0-1.337 1.077-.707 1.707L15 41" }, null, -1)];
  var $t = o(Vt, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Wt, 10, It);
  }]]);
  const Zt = Object.assign($t, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + $t.name, $t);
  } }), zt = e.defineComponent({ name: "IconToBottom", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-to-bottom`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Pt = ["stroke-width", "stroke-linecap", "stroke-linejoin"], qt = [e.createElementVNode("path", { d: "M5 41h38M24 28V5M24 34.04 17.547 27h12.907L24 34.04Zm-.736.803v.001Z" }, null, -1), e.createElementVNode("path", { d: "m24 34 6-7H18l6 7Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Ot = o(zt, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, qt, 10, Pt);
  }]]);
  const Ht = Object.assign(Ot, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ot.name, Ot);
  } }), Ft = e.defineComponent({ name: "IconToLeft", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-to-left`, { [`${o2}-spin`]: t2.spin }]) };
  } }), At = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Dt = [e.createElementVNode("path", { d: "M7 5v38M20 24h23M20.999 17.547v12.907L13.959 24l7.04-6.453Z" }, null, -1), e.createElementVNode("path", { d: "m14 24 7 6V18l-7 6Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Rt = o(Ft, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Dt, 10, At);
  }]]);
  const Tt = Object.assign(Rt, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Rt.name, Rt);
  } }), Ut = e.defineComponent({ name: "IconToRight", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-to-right`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Qt = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Gt = [e.createElementVNode("path", { d: "M41 43V5M28 24H5M34.04 24 27 30.453V17.546L34.04 24Zm.803.736h.001Z" }, null, -1), e.createElementVNode("path", { d: "m34 24-7-6v12l7-6Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Xt = o(Ut, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Gt, 10, Qt);
  }]]);
  const Jt = Object.assign(Xt, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Xt.name, Xt);
  } }), Kt = e.defineComponent({ name: "IconToTop", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-to-top`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Yt = ["stroke-width", "stroke-linecap", "stroke-linejoin"], _t = [e.createElementVNode("path", { d: "M43 7H5M24 20v23M24 13.96 30.453 21H17.546L24 13.96Zm.736-.804Z" }, null, -1), e.createElementVNode("path", { d: "m24 14-6 7h12l-6-7Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var en = o(Kt, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, _t, 10, Yt);
  }]]);
  const tn = Object.assign(en, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + en.name, en);
  } }), nn = e.defineComponent({ name: "IconUpCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-up-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), on = ["stroke-width", "stroke-linecap", "stroke-linejoin"], rn = [e.createElementVNode("circle", { cx: "24", cy: "24", r: "18" }, null, -1), e.createElementVNode("path", { d: "M15.516 28.485 24 20l8.485 8.485" }, null, -1)];
  var sn = o(nn, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, rn, 10, on);
  }]]);
  const ln = Object.assign(sn, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + sn.name, sn);
  } }), cn = e.defineComponent({ name: "IconUp", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-up`, { [`${o2}-spin`]: t2.spin }]) };
  } }), an = ["stroke-width", "stroke-linecap", "stroke-linejoin"], pn = [e.createElementVNode("path", { d: "M39.6 30.557 24.043 15 8.487 30.557" }, null, -1)];
  var dn = o(cn, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, pn, 10, an);
  }]]);
  const un = Object.assign(dn, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + dn.name, dn);
  } }), kn = e.defineComponent({ name: "IconCheckCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-check-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), mn = ["stroke-width", "stroke-linecap", "stroke-linejoin"], vn = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm10.207-24.379a1 1 0 0 0 0-1.414l-1.414-1.414a1 1 0 0 0-1.414 0L22 26.172l-4.878-4.88a1 1 0 0 0-1.415 0l-1.414 1.415a1 1 0 0 0 0 1.414l7 7a1 1 0 0 0 1.414 0l11.5-11.5Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var hn = o(kn, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, vn, 10, mn);
  }]]);
  const fn = Object.assign(hn, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + hn.name, hn);
  } }), wn = e.defineComponent({ name: "IconCloseCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-close-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), gn = ["stroke-width", "stroke-linecap", "stroke-linejoin"], bn = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm4.955-27.771-4.95 4.95-4.95-4.95a1 1 0 0 0-1.414 0l-1.414 1.414a1 1 0 0 0 0 1.414l4.95 4.95-4.95 4.95a1 1 0 0 0 0 1.414l1.414 1.414a1 1 0 0 0 1.414 0l4.95-4.95 4.95 4.95a1 1 0 0 0 1.414 0l1.414-1.414a1 1 0 0 0 0-1.414l-4.95-4.95 4.95-4.95a1 1 0 0 0 0-1.414l-1.414-1.414a1 1 0 0 0-1.414 0Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var jn = o(wn, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, bn, 10, gn);
  }]]);
  const Ln = Object.assign(jn, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + jn.name, jn);
  } }), Bn = e.defineComponent({ name: "IconExclamationCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-exclamation-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Cn = ["stroke-width", "stroke-linecap", "stroke-linejoin"], yn = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm-2-11a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2Zm4-18a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V15Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var xn = o(Bn, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, yn, 10, Cn);
  }]]);
  const En = Object.assign(xn, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + xn.name, xn);
  } }), Sn = e.defineComponent({ name: "IconExclamationPolygonFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-exclamation-polygon-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Mn = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Nn = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M15.553 4a1 1 0 0 0-.74.327L4.26 15.937a1 1 0 0 0-.26.672V31.39a1 1 0 0 0 .26.673l10.553 11.609a1 1 0 0 0 .74.327h16.893a1 1 0 0 0 .74-.327l10.554-11.61a1 1 0 0 0 .26-.672V16.61a1 1 0 0 0-.26-.673L33.187 4.327a1 1 0 0 0-.74-.327H15.553ZM22 33a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2Zm4-18a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V15Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Vn = o(Sn, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Nn, 10, Mn);
  }]]);
  const In = Object.assign(Vn, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Vn.name, Vn);
  } }), Wn = e.defineComponent({ name: "IconInfoCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-info-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), $n = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Zn = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm2-30a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2Zm0 17h1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-6a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h1v-8a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h3a1 1 0 0 1 1 1v11Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var zn = o(Wn, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Zn, 10, $n);
  }]]);
  const Pn = Object.assign(zn, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + zn.name, zn);
  } }), qn = e.defineComponent({ name: "IconMinusCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-minus-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), On = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Hn = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm-7-22a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H17Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Fn = o(qn, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Hn, 10, On);
  }]]);
  const An = Object.assign(Fn, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Fn.name, Fn);
  } }), Dn = e.defineComponent({ name: "IconPlusCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-plus-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Rn = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Tn = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm2-28v6h6a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-6v6a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-6h-6a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h6v-6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Un = o(Dn, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Tn, 10, Rn);
  }]]);
  const Qn = Object.assign(Un, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Un.name, Un);
  } }), Gn = e.defineComponent({ name: "IconQuestionCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-question-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Xn = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Jn = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm-3.862-24.021a.461.461 0 0 0 .462-.462 2.37 2.37 0 0 1 .636-1.615C21.64 17.48 22.43 17 23.988 17c1.465 0 2.483.7 3.002 1.493.555.848.446 1.559.182 1.914-.328.444-.736.853-1.228 1.296-.15.135-.335.296-.533.468-.354.308-.75.654-1.067.955C23.22 24.195 22 25.686 22 28v.013a1 1 0 0 0 1.006.993l2.008-.012a.993.993 0 0 0 .986-1c.002-.683.282-1.19 1.101-1.97.276-.262.523-.477.806-.722.21-.18.439-.379.713-.626.57-.513 1.205-1.13 1.767-1.888 1.516-2.047 1.161-4.634-.05-6.485C29.092 14.398 26.825 13 23.988 13c-2.454 0-4.357.794-5.642 2.137-1.25 1.307-1.742 2.954-1.746 4.37 0 .26.21.472.47.472h3.068Zm1.868 14.029a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V32a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2.008Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Kn = o(Gn, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Jn, 10, Xn);
  }]]);
  const Yn = Object.assign(Kn, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Kn.name, Kn);
  } }), _n = e.defineComponent({ name: "IconCheckCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-check-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), eo = ["stroke-width", "stroke-linecap", "stroke-linejoin"], to = [e.createElementVNode("path", { d: "m15 22 7 7 11.5-11.5M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1)];
  var no = o(_n, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, to, 10, eo);
  }]]);
  const oo = Object.assign(no, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + no.name, no);
  } }), ro = e.defineComponent({ name: "IconCheckSquare", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-check-square`, { [`${o2}-spin`]: t2.spin }]) };
  } }), io = ["stroke-width", "stroke-linecap", "stroke-linejoin"], so = [e.createElementVNode("path", { d: "M34.603 16.672 21.168 30.107l-7.778-7.779M8 41h32a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v32a1 1 0 0 0 1 1Z" }, null, -1)];
  var lo = o(ro, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, so, 10, io);
  }]]);
  const co = Object.assign(lo, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + lo.name, lo);
  } }), ao = e.defineComponent({ name: "IconCheck", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-check`, { [`${o2}-spin`]: t2.spin }]) };
  } }), po = ["stroke-width", "stroke-linecap", "stroke-linejoin"], uo = [e.createElementVNode("path", { d: "M41.678 11.05 19.05 33.678 6.322 20.95" }, null, -1)];
  var ko = o(ao, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, uo, 10, po);
  }]]);
  const mo = Object.assign(ko, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ko.name, ko);
  } }), vo = e.defineComponent({ name: "IconClockCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-clock-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ho = ["stroke-width", "stroke-linecap", "stroke-linejoin"], fo = [e.createElementVNode("path", { d: "M24 14v10h9.5m8.5 0c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1)];
  var wo = o(vo, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, fo, 10, ho);
  }]]);
  const go = Object.assign(wo, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + wo.name, wo);
  } }), bo = e.defineComponent({ name: "IconCloseCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-close-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), jo = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Lo = [e.createElementVNode("path", { d: "m17.643 17.643 6.364 6.364m0 0 6.364 6.364m-6.364-6.364 6.364-6.364m-6.364 6.364-6.364 6.364M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1)];
  var Bo = o(bo, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Lo, 10, jo);
  }]]);
  const Co = Object.assign(Bo, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Bo.name, Bo);
  } }), yo = e.defineComponent({ name: "IconClose", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-close`, { [`${o2}-spin`]: t2.spin }]) };
  } }), xo = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Eo = [e.createElementVNode("path", { d: "M9.857 9.858 24 24m0 0 14.142 14.142M24 24 38.142 9.858M24 24 9.857 38.142" }, null, -1)];
  var So = o(yo, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Eo, 10, xo);
  }]]);
  const Mo = Object.assign(So, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + So.name, So);
  } }), No = e.defineComponent({ name: "IconExclamationCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-exclamation-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Vo = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Io = [e.createElementVNode("path", { d: "M24 28V14m0 16v4M6 24c0-9.941 8.059-18 18-18s18 8.059 18 18-8.059 18-18 18S6 33.941 6 24Z" }, null, -1)];
  var Wo = o(No, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Io, 10, Vo);
  }]]);
  const $o = Object.assign(Wo, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Wo.name, Wo);
  } }), Zo = e.defineComponent({ name: "IconExclamation", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-exclamation`, { [`${o2}-spin`]: t2.spin }]) };
  } }), zo = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Po = [e.createElementVNode("path", { d: "M23 9h2v21h-2z" }, null, -1), e.createElementVNode("path", { fill: "currentColor", stroke: "none", d: "M23 9h2v21h-2z" }, null, -1), e.createElementVNode("path", { d: "M23 37h2v2h-2z" }, null, -1), e.createElementVNode("path", { fill: "currentColor", stroke: "none", d: "M23 37h2v2h-2z" }, null, -1)];
  var qo = o(Zo, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Po, 10, zo);
  }]]);
  const Oo = Object.assign(qo, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + qo.name, qo);
  } }), Ho = e.defineComponent({ name: "IconInfoCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-info-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Fo = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ao = [e.createElementVNode("path", { d: "M24 20v14m0-16v-4m18 10c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1)];
  var Do = o(Ho, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ao, 10, Fo);
  }]]);
  const Ro = Object.assign(Do, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Do.name, Do);
  } }), To = e.defineComponent({ name: "IconInfo", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-info`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Uo = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Qo = [e.createElementVNode("path", { d: "M25 39h-2V18h2z" }, null, -1), e.createElementVNode("path", { fill: "currentColor", stroke: "none", d: "M25 39h-2V18h2z" }, null, -1), e.createElementVNode("path", { d: "M25 11h-2V9h2z" }, null, -1), e.createElementVNode("path", { fill: "currentColor", stroke: "none", d: "M25 11h-2V9h2z" }, null, -1)];
  var Go = o(To, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Qo, 10, Uo);
  }]]);
  const Xo = Object.assign(Go, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Go.name, Go);
  } }), Jo = e.defineComponent({ name: "IconMinusCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-minus-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ko = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Yo = [e.createElementVNode("path", { d: "M32 24H16m26 0c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1)];
  var _o = o(Jo, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Yo, 10, Ko);
  }]]);
  const er = Object.assign(_o, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + _o.name, _o);
  } }), tr = e.defineComponent({ name: "IconMinus", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-minus`, { [`${o2}-spin`]: t2.spin }]) };
  } }), nr = ["stroke-width", "stroke-linecap", "stroke-linejoin"], or = [e.createElementVNode("path", { d: "M5 24h38" }, null, -1)];
  var rr = o(tr, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, or, 10, nr);
  }]]);
  const ir = Object.assign(rr, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + rr.name, rr);
  } }), sr = e.defineComponent({ name: "IconPlusCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-plus-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), lr = ["stroke-width", "stroke-linecap", "stroke-linejoin"], cr = [e.createElementVNode("path", { d: "M32 24h-8m-8 0h8m0 0v8m0-8v-8m18 8c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1)];
  var ar = o(sr, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, cr, 10, lr);
  }]]);
  const pr = Object.assign(ar, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ar.name, ar);
  } }), dr = e.defineComponent({ name: "IconPlus", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-plus`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ur = ["stroke-width", "stroke-linecap", "stroke-linejoin"], kr = [e.createElementVNode("path", { d: "M5 24h38M24 5v38" }, null, -1)];
  var mr = o(dr, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, kr, 10, ur);
  }]]);
  const vr = Object.assign(mr, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + mr.name, mr);
  } }), hr = e.defineComponent({ name: "IconQuestionCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-question-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), fr = ["stroke-width", "stroke-linecap", "stroke-linejoin"], wr = [e.createElementVNode("path", { d: "M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1), e.createElementVNode("path", { d: "M24.006 31v4.008m0-6.008L24 28c0-3 3-4 4.78-6.402C30.558 19.195 28.288 15 23.987 15c-4.014 0-5.382 2.548-5.388 4.514v.465" }, null, -1)];
  var gr = o(hr, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, wr, 10, fr);
  }]]);
  const br = Object.assign(gr, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + gr.name, gr);
  } }), jr = e.defineComponent({ name: "IconQuestion", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-question`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Lr = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Br = [e.createElementVNode("path", { d: "M13 17c0-5.523 4.925-10 11-10s11 4.477 11 10c0 3.607-2.1 6.767-5.25 8.526C26.857 27.142 24 29.686 24 33v3m0 5h.02v.02H24V41Z" }, null, -1)];
  var Cr = o(jr, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Br, 10, Lr);
  }]]);
  const yr = Object.assign(Cr, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Cr.name, Cr);
  } }), xr = e.defineComponent({ name: "IconStop", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-stop`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Er = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Sr = [e.createElementVNode("path", { d: "M36.728 36.728c7.03-7.03 7.03-18.427 0-25.456-7.03-7.03-18.427-7.03-25.456 0m25.456 25.456c-7.03 7.03-18.427 7.03-25.456 0-7.03-7.03-7.03-18.427 0-25.456m25.456 25.456L11.272 11.272" }, null, -1)];
  var Mr = o(xr, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Sr, 10, Er);
  }]]);
  const Nr = Object.assign(Mr, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Mr.name, Mr);
  } }), Vr = e.defineComponent({ name: "IconHeartFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-heart-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ir = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Wr = [e.createElementVNode("path", { d: "M24 10.541c4.35-4.522 11.405-4.814 15.756-.292 4.35 4.522 4.15 11.365.448 17.135C36.153 33.7 28 41.5 24 42c-4-.5-12.152-8.3-16.204-14.616-3.702-5.77-3.902-12.613.448-17.135C12.595 5.727 19.65 6.019 24 10.54Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var $r = o(Vr, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Wr, 10, Ir);
  }]]);
  const Zr = Object.assign($r, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + $r.name, $r);
  } }), zr = e.defineComponent({ name: "IconStarFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-star-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Pr = ["stroke-width", "stroke-linecap", "stroke-linejoin"], qr = [e.createElementVNode("path", { d: "M22.683 5.415c.568-1.043 2.065-1.043 2.634 0l5.507 10.098a1.5 1.5 0 0 0 1.04.756l11.306 2.117c1.168.219 1.63 1.642.814 2.505l-7.902 8.359a1.5 1.5 0 0 0-.397 1.223l1.48 11.407c.153 1.177-1.058 2.057-2.131 1.548l-10.391-4.933a1.5 1.5 0 0 0-1.287 0l-10.39 4.933c-1.073.51-2.284-.37-2.131-1.548l1.48-11.407a1.5 1.5 0 0 0-.398-1.223L4.015 20.89c-.816-.863-.353-2.286.814-2.505l11.306-2.117a1.5 1.5 0 0 0 1.04-.756l5.508-10.098Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Or = o(zr, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, qr, 10, Pr);
  }]]);
  const Hr = Object.assign(Or, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Or.name, Or);
  } }), Fr = e.defineComponent({ name: "IconThumbDownFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-thumb-down-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ar = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Dr = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M43 5v26h-4V5h4Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M20.9 43.537a2 2 0 0 0 2.83-.364L32.964 31H36V5H12.424a2 2 0 0 0-1.89 1.346L4.838 25.692C3.938 28.29 5.868 31 8.618 31h10.568l-2.421 5.448a4 4 0 0 0 1.184 4.77l2.951 2.32Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Rr = o(Fr, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Dr, 10, Ar);
  }]]);
  const Tr = Object.assign(Rr, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Rr.name, Rr);
  } }), Ur = e.defineComponent({ name: "IconThumbUpFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-thumb-up-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Qr = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Gr = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M5 43V17h4v26H5Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M27.1 4.463a2 2 0 0 0-2.83.364L15.036 17H12v26h23.576a2 2 0 0 0 1.89-1.346l5.697-19.346c.899-2.598-1.03-5.308-3.78-5.308h-10.57l2.422-5.448a4 4 0 0 0-1.184-4.77L27.1 4.462Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Xr = o(Ur, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Gr, 10, Qr);
  }]]);
  const Jr = Object.assign(Xr, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Xr.name, Xr);
  } }), Kr = e.defineComponent({ name: "IconAt", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-at`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Yr = ["stroke-width", "stroke-linecap", "stroke-linejoin"], _r = [e.createElementVNode("path", { d: "M31 23a7 7 0 1 1-14 0 7 7 0 0 1 14 0Zm0 0c0 3.038 2.462 6.5 5.5 6.5A5.5 5.5 0 0 0 42 24c0-9.941-8.059-18-18-18S6 14.059 6 24s8.059 18 18 18c4.244 0 8.145-1.469 11.222-3.925" }, null, -1)];
  var ei = o(Kr, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, _r, 10, Yr);
  }]]);
  const ti = Object.assign(ei, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ei.name, ei);
  } }), ni = e.defineComponent({ name: "IconCloudDownload", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-cloud-download`, { [`${o2}-spin`]: t2.spin }]) };
  } }), oi = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ri = [e.createElementVNode("path", { d: "M43 22c0-7.732-6.492-14-14.5-14S14 14.268 14 22v.055A9.001 9.001 0 0 0 15 40h13m16.142-5.929-7.07 7.071L30 34.072M37.07 26v15" }, null, -1)];
  var ii = o(ni, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ri, 10, oi);
  }]]);
  const si = Object.assign(ii, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ii.name, ii);
  } }), li = e.defineComponent({ name: "IconCodeBlock", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-code-block`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ci = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ai = [e.createElementVNode("path", { d: "M19 6h-4a3 3 0 0 0-3 3v10c0 3-4.343 5-6 5 1.657 0 6 2 6 5v10a3 3 0 0 0 3 3h4M29 6h4a3 3 0 0 1 3 3v10c0 3 4.343 5 6 5-1.657 0-6 2-6 5v10a3 3 0 0 1-3 3h-4" }, null, -1)];
  var pi = o(li, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ai, 10, ci);
  }]]);
  const di = Object.assign(pi, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + pi.name, pi);
  } }), ui = e.defineComponent({ name: "IconCodeSquare", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-code-square`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ki = ["stroke-width", "stroke-linecap", "stroke-linejoin"], mi = [e.createElementVNode("path", { d: "M23.071 17 16 24.071l7.071 7.071m9.001-14.624-4.14 15.454M9 42h30a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v34a1 1 0 0 0 1 1Z" }, null, -1)];
  var vi = o(ui, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, mi, 10, ki);
  }]]);
  const hi = Object.assign(vi, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + vi.name, vi);
  } }), fi = e.defineComponent({ name: "IconCode", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-code`, { [`${o2}-spin`]: t2.spin }]) };
  } }), wi = ["stroke-width", "stroke-linecap", "stroke-linejoin"], gi = [e.createElementVNode("path", { d: "M16.734 12.686 5.42 24l11.314 11.314m14.521-22.628L42.57 24 31.255 35.314M27.2 6.28l-6.251 35.453" }, null, -1)];
  var bi = o(fi, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, gi, 10, wi);
  }]]);
  const ji = Object.assign(bi, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + bi.name, bi);
  } }), Li = e.defineComponent({ name: "IconCustomerService", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-customer-service`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Bi = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ci = [e.createElementVNode("path", { d: "M11 31V20c0-7.18 5.82-13 13-13s13 5.82 13 13v8c0 5.784-3.778 10.686-9 12.373m0 0A12.99 12.99 0 0 1 24 41h-3a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v2.373Zm0 0V41m9-20h3a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1h-3v-8Zm-26 0H8a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h3v-8Z" }, null, -1)];
  var yi = o(Li, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ci, 10, Bi);
  }]]);
  const xi = Object.assign(yi, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + yi.name, yi);
  } }), Ei = e.defineComponent({ name: "IconDownload", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-download`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Si = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Mi = [e.createElementVNode("path", { d: "m33.072 22.071-9.07 9.071-9.072-9.07M24 5v26m16 4v6H8v-6" }, null, -1)];
  var Ni = o(Ei, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Mi, 10, Si);
  }]]);
  const Vi = Object.assign(Ni, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ni.name, Ni);
  } }), Ii = e.defineComponent({ name: "IconExport", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-export`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Wi = ["stroke-width", "stroke-linecap", "stroke-linejoin"], $i = [e.createElementVNode("path", { d: "M31.928 33.072 41 24.002l-9.072-9.072M16.858 24h24M31 41H7V7h24" }, null, -1)];
  var Zi = o(Ii, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, $i, 10, Wi);
  }]]);
  const zi = Object.assign(Zi, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Zi.name, Zi);
  } }), Pi = e.defineComponent({ name: "IconEyeInvisible", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-eye-invisible`, { [`${o2}-spin`]: t2.spin }]) };
  } }), qi = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Oi = [e.createElementVNode("path", { d: "M14 14.5c-2.69 2-5.415 5.33-8 9.5 5.373 8.667 11.373 13 18 13 3.325 0 6.491-1.09 9.5-3.271M17.463 12.5C19 11 21.75 11 24 11c6.627 0 12.627 4.333 18 13-1.766 2.848-3.599 5.228-5.5 7.14" }, null, -1), e.createElementVNode("path", { d: "M29 24a5 5 0 1 1-10 0 5 5 0 0 1 10 0ZM6.852 7.103l34.294 34.294" }, null, -1)];
  var Hi = o(Pi, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Oi, 10, qi);
  }]]);
  const Fi = Object.assign(Hi, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Hi.name, Hi);
  } }), Ai = e.defineComponent({ name: "IconEye", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-eye`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Di = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ri = [e.createElementVNode("path", { "clip-rule": "evenodd", d: "M24 37c6.627 0 12.627-4.333 18-13-5.373-8.667-11.373-13-18-13-6.627 0-12.627 4.333-18 13 5.373 8.667 11.373 13 18 13Z" }, null, -1), e.createElementVNode("path", { d: "M29 24a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z" }, null, -1)];
  var Ti = o(Ai, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ri, 10, Di);
  }]]);
  const Ui = Object.assign(Ti, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ti.name, Ti);
  } }), Qi = e.defineComponent({ name: "IconHeart", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-heart`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Gi = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Xi = [e.createElementVNode("path", { d: "M38.083 12.912a9.929 9.929 0 0 1 .177 13.878l-.177.18L25.76 39.273c-.972.97-2.548.97-3.52 0L9.917 26.971l-.177-.181a9.929 9.929 0 0 1 .177-13.878c3.889-3.883 10.194-3.883 14.083 0 3.889-3.883 10.194-3.883 14.083 0Z" }, null, -1)];
  var Ji = o(Qi, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Xi, 10, Gi);
  }]]);
  const Ki = Object.assign(Ji, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ji.name, Ji);
  } }), Yi = e.defineComponent({ name: "IconHistory", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-history`, { [`${o2}-spin`]: t2.spin }]) };
  } }), _i = ["stroke-width", "stroke-linecap", "stroke-linejoin"], es = [e.createElementVNode("path", { d: "M6 24c0-9.941 8.059-18 18-18s18 8.059 18 18-8.059 18-18 18c-6.26 0-11.775-3.197-15-8.047M6 24l-.5-.757h1L6 24Zm26 2h-9v-9" }, null, -1)];
  var ts = o(Yi, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, es, 10, _i);
  }]]);
  const ns = Object.assign(ts, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ts.name, ts);
  } }), os = e.defineComponent({ name: "IconHome", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-home`, { [`${o2}-spin`]: t2.spin }]) };
  } }), rs = ["stroke-width", "stroke-linecap", "stroke-linejoin"], is = [e.createElementVNode("path", { d: "M7 17 24 7l17 10v24H7V17Z" }, null, -1), e.createElementVNode("path", { d: "M20 28h8v13h-8V28Z" }, null, -1)];
  var ss = o(os, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, is, 10, rs);
  }]]);
  const ls = Object.assign(ss, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ss.name, ss);
  } }), cs = e.defineComponent({ name: "IconImport", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-import`, { [`${o2}-spin`]: t2.spin }]) };
  } }), as = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ps = [e.createElementVNode("path", { d: "m27.929 33.072-9.071-9.07 9.07-9.072M43 24H19m12 17H7V7h24" }, null, -1)];
  var ds = o(cs, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ps, 10, as);
  }]]);
  const us = Object.assign(ds, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ds.name, ds);
  } }), ks = e.defineComponent({ name: "IconList", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-list`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ms = ["stroke-width", "stroke-linecap", "stroke-linejoin"], vs = [e.createElementVNode("path", { d: "M13 24h30M5 12h4m4 24h30M13 12h30M5 24h4M5 36h4" }, null, -1)];
  var hs = o(ks, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, vs, 10, ms);
  }]]);
  const fs = Object.assign(hs, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + hs.name, hs);
  } }), ws = e.defineComponent({ name: "IconMessageBanned", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-message-banned`, { [`${o2}-spin`]: t2.spin }]) };
  } }), gs = ["stroke-width", "stroke-linecap", "stroke-linejoin"], bs = [e.createElementVNode("path", { d: "M40.527 20C38.727 12.541 32.01 7 24 7 14.611 7 7 14.611 7 24v17h14m19.364-.636a9 9 0 0 0-12.728-12.728m12.728 12.728a9 9 0 0 1-12.728-12.728m12.728 12.728L27.636 27.636M13 20h12m-12 9h6" }, null, -1)];
  var js = o(ws, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, bs, 10, gs);
  }]]);
  const Ls = Object.assign(js, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + js.name, js);
  } }), Bs = e.defineComponent({ name: "IconMessage", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-message`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Cs = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ys = [e.createElementVNode("path", { d: "M15 20h18m-18 9h9M7 41h17.63C33.67 41 41 33.67 41 24.63V24c0-9.389-7.611-17-17-17S7 14.611 7 24v17Z" }, null, -1)];
  var xs = o(Bs, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ys, 10, Cs);
  }]]);
  const Es = Object.assign(xs, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + xs.name, xs);
  } }), Ss = e.defineComponent({ name: "IconMoreVertical", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-more-vertical`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ms = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ns = [e.createElementVNode("path", { d: "M25 10h-2V8h2v2ZM25 25h-2v-2h2v2ZM25 40h-2v-2h2v2Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M25 10h-2V8h2v2ZM25 25h-2v-2h2v2ZM25 40h-2v-2h2v2Z" }, null, -1)];
  var Vs = o(Ss, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ns, 10, Ms);
  }]]);
  const Is = Object.assign(Vs, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Vs.name, Vs);
  } }), Ws = e.defineComponent({ name: "IconMore", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-more`, { [`${o2}-spin`]: t2.spin }]) };
  } }), $s = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Zs = [e.createElementVNode("path", { d: "M38 25v-2h2v2h-2ZM23 25v-2h2v2h-2ZM8 25v-2h2v2H8Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M38 25v-2h2v2h-2ZM23 25v-2h2v2h-2ZM8 25v-2h2v2H8Z" }, null, -1)];
  var zs = o(Ws, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Zs, 10, $s);
  }]]);
  const Ps = Object.assign(zs, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + zs.name, zs);
  } }), qs = e.defineComponent({ name: "IconPoweroff", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-poweroff`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Os = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Hs = [e.createElementVNode("path", { d: "M15.5 9.274C10.419 12.214 7 17.708 7 24c0 9.389 7.611 17 17 17s17-7.611 17-17c0-6.292-3.419-11.786-8.5-14.726M24 5v22" }, null, -1)];
  var Fs = o(qs, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Hs, 10, Os);
  }]]);
  const As = Object.assign(Fs, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Fs.name, Fs);
  } }), Ds = e.defineComponent({ name: "IconRefresh", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-refresh`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Rs = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ts = [e.createElementVNode("path", { d: "M38.837 18C36.463 12.136 30.715 8 24 8 15.163 8 8 15.163 8 24s7.163 16 16 16c7.455 0 13.72-5.1 15.496-12M40 8v10H30" }, null, -1)];
  var Us = o(Ds, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ts, 10, Rs);
  }]]);
  const Qs = Object.assign(Us, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Us.name, Us);
  } }), Gs = e.defineComponent({ name: "IconReply", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-reply`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Xs = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Js = [e.createElementVNode("path", { d: "m6.642 24.684 14.012 14.947a.2.2 0 0 0 .346-.137v-8.949A23.077 23.077 0 0 1 26 30c6.208 0 11.84 2.459 15.978 6.456a.01.01 0 0 0 .017-.007C42 36.299 42 36.15 42 36c0-10.493-8.506-19-19-19-.675 0-1.342.035-2 .104V8.506a.2.2 0 0 0-.346-.137L6.642 23.316a1 1 0 0 0 0 1.368Z" }, null, -1)];
  var Ks = o(Gs, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Js, 10, Xs);
  }]]);
  const Ys = Object.assign(Ks, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ks.name, Ks);
  } }), _s = e.defineComponent({ name: "IconSave", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-save`, { [`${o2}-spin`]: t2.spin }]) };
  } }), el = ["stroke-width", "stroke-linecap", "stroke-linejoin"], tl = [e.createElementVNode("path", { d: "M21 13v9m18 20H9a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h22.55a1 1 0 0 1 .748.336l7.45 8.38a1 1 0 0 1 .252.664V41a1 1 0 0 1-1 1ZM14 6h14v15a1 1 0 0 1-1 1H15a1 1 0 0 1-1-1V6Z" }, null, -1)];
  var nl = o(_s, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, tl, 10, el);
  }]]);
  const ol = Object.assign(nl, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + nl.name, nl);
  } }), rl = e.defineComponent({ name: "IconScan", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-scan`, { [`${o2}-spin`]: t2.spin }]) };
  } }), il = ["stroke-width", "stroke-linecap", "stroke-linejoin"], sl = [e.createElementVNode("path", { d: "M7 17V7h10m24 10V7H31m10 24v10H31M7 31v10h10M5 24h38" }, null, -1)];
  var ll = o(rl, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, sl, 10, il);
  }]]);
  const cl = Object.assign(ll, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ll.name, ll);
  } }), al = e.defineComponent({ name: "IconSearch", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-search`, { [`${o2}-spin`]: t2.spin }]) };
  } }), pl = ["stroke-width", "stroke-linecap", "stroke-linejoin"], dl = [e.createElementVNode("path", { d: "M33.072 33.071c6.248-6.248 6.248-16.379 0-22.627-6.249-6.249-16.38-6.249-22.628 0-6.248 6.248-6.248 16.379 0 22.627 6.248 6.248 16.38 6.248 22.628 0Zm0 0 8.485 8.485" }, null, -1)];
  var ul = o(al, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, dl, 10, pl);
  }]]);
  const kl = Object.assign(ul, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ul.name, ul);
  } }), ml = e.defineComponent({ name: "IconSelectAll", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-select-all`, { [`${o2}-spin`]: t2.spin }]) };
  } }), vl = ["stroke-width", "stroke-linecap", "stroke-linejoin"], hl = [e.createElementVNode("path", { d: "m17.314 7.243-7.071 7.07L6 10.072m11.314 10.172-7.071 7.07L6 23.072m11.314 10.172-7.071 7.07L6 36.072M21 11h22M21 25h22M21 39h22" }, null, -1)];
  var fl = o(ml, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, hl, 10, vl);
  }]]);
  const wl = Object.assign(fl, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + fl.name, fl);
  } }), gl = e.defineComponent({ name: "IconSend", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-send`, { [`${o2}-spin`]: t2.spin }]) };
  } }), bl = ["stroke-width", "stroke-linecap", "stroke-linejoin"], jl = [e.createElementVNode("path", { d: "m14 24-7-5V7l34 17L7 41V29l7-5Zm0 0h25", "stroke-miterlimit": "3.864" }, null, -1)];
  var Ll = o(gl, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, jl, 10, bl);
  }]]);
  const Bl = Object.assign(Ll, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ll.name, Ll);
  } }), Cl = e.defineComponent({ name: "IconSettings", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-settings`, { [`${o2}-spin`]: t2.spin }]) };
  } }), yl = ["stroke-width", "stroke-linecap", "stroke-linejoin"], xl = [e.createElementVNode("path", { d: "M18.797 6.732A1 1 0 0 1 19.76 6h8.48a1 1 0 0 1 .964.732l1.285 4.628a1 1 0 0 0 1.213.7l4.651-1.2a1 1 0 0 1 1.116.468l4.24 7.344a1 1 0 0 1-.153 1.2L38.193 23.3a1 1 0 0 0 0 1.402l3.364 3.427a1 1 0 0 1 .153 1.2l-4.24 7.344a1 1 0 0 1-1.116.468l-4.65-1.2a1 1 0 0 0-1.214.7l-1.285 4.628a1 1 0 0 1-.964.732h-8.48a1 1 0 0 1-.963-.732L17.51 36.64a1 1 0 0 0-1.213-.7l-4.65 1.2a1 1 0 0 1-1.116-.468l-4.24-7.344a1 1 0 0 1 .153-1.2L9.809 24.7a1 1 0 0 0 0-1.402l-3.364-3.427a1 1 0 0 1-.153-1.2l4.24-7.344a1 1 0 0 1 1.116-.468l4.65 1.2a1 1 0 0 0 1.213-.7l1.286-4.628Z" }, null, -1), e.createElementVNode("path", { d: "M30 24a6 6 0 1 1-12 0 6 6 0 0 1 12 0Z" }, null, -1)];
  var El = o(Cl, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, xl, 10, yl);
  }]]);
  const Sl = Object.assign(El, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + El.name, El);
  } }), Ml = e.defineComponent({ name: "IconShareAlt", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-share-alt`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Nl = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Vl = [e.createElementVNode("path", { d: "M32.442 21.552a4.5 4.5 0 1 1 .065 4.025m-.065-4.025-16.884-8.104m16.884 8.104A4.483 4.483 0 0 0 32 23.5c0 .75.183 1.455.507 2.077m-16.95-12.13a4.5 4.5 0 1 1-8.113-3.895 4.5 4.5 0 0 1 8.114 3.896Zm-.064 20.977A4.5 4.5 0 1 0 11.5 41c3.334-.001 5.503-3.68 3.993-6.578Zm0 0 17.014-8.847" }, null, -1)];
  var Il = o(Ml, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Vl, 10, Nl);
  }]]);
  const Wl = Object.assign(Il, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Il.name, Il);
  } }), $l = e.defineComponent({ name: "IconShareExternal", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-share-external`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Zl = ["stroke-width", "stroke-linecap", "stroke-linejoin"], zl = [e.createElementVNode("path", { d: "M18 20h-7a1 1 0 0 0-1 1v20a1 1 0 0 0 1 1h26a1 1 0 0 0 1-1V21a1 1 0 0 0-1-1h-7m2.368-5.636L24.004 6l-8.364 8.364M24.003 28V6.604", "stroke-miterlimit": "16" }, null, -1)];
  var Pl = o($l, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, zl, 10, Zl);
  }]]);
  const ql = Object.assign(Pl, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Pl.name, Pl);
  } }), Ol = e.defineComponent({ name: "IconShareInternal", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-share-internal`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Hl = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Fl = [e.createElementVNode("path", { d: "M40 35v6H8v-6m1.108-4c1.29-8.868 13.917-15.85 29.392-15.998M30 6l9 9-9 9" }, null, -1)];
  var Al = o(Ol, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Fl, 10, Hl);
  }]]);
  const Dl = Object.assign(Al, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Al.name, Al);
  } }), Rl = e.defineComponent({ name: "IconStar", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-star`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Tl = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ul = [e.createElementVNode("path", { d: "M22.552 6.908a.5.5 0 0 1 .896 0l5.02 10.17a.5.5 0 0 0 .376.274l11.224 1.631a.5.5 0 0 1 .277.853l-8.122 7.916a.5.5 0 0 0-.143.443l1.917 11.178a.5.5 0 0 1-.726.527l-10.038-5.278a.5.5 0 0 0-.466 0L12.73 39.9a.5.5 0 0 1-.726-.527l1.918-11.178a.5.5 0 0 0-.144-.443l-8.122-7.916a.5.5 0 0 1 .278-.853l11.223-1.63a.5.5 0 0 0 .376-.274l5.02-10.17Z" }, null, -1)];
  var Ql = o(Rl, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ul, 10, Tl);
  }]]);
  const Gl = Object.assign(Ql, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ql.name, Ql);
  } }), Xl = e.defineComponent({ name: "IconSync", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-sync`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Jl = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Kl = [e.createElementVNode("path", { d: "m33.193 11.98 1.414-1.414 1.414-1.415h-2.828v2.829ZM14.812 36.018l-1.415 1.414-1.414 1.414h2.829v-2.828Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "m34.607 10.566 1.414-1.415h-2.828v2.829l1.414-1.414Zm0 0 1.414 1.414c6.64 6.639 6.64 17.403 0 24.042a16.922 16.922 0 0 1-8.942 4.7m-13.682-3.29-1.414 1.414h2.829v-2.828l-1.415 1.414Zm0 0-1.414-1.414c-6.639-6.639-6.639-17.403 0-24.042a16.922 16.922 0 0 1 8.942-4.7" }, null, -1)];
  var Yl = o(Xl, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Kl, 10, Jl);
  }]]);
  const _l = Object.assign(Yl, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Yl.name, Yl);
  } }), ec = e.defineComponent({ name: "IconThumbDown", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-thumb-down`, { [`${o2}-spin`]: t2.spin }]) };
  } }), tc = ["stroke-width", "stroke-linecap", "stroke-linejoin"], nc = [e.createElementVNode("path", { d: "M41 31V5M5.83 26.394l5.949-18.697A1 1 0 0 1 12.732 7H34v22h-3l-9.403 12.223a1 1 0 0 1-1.386.196l-2.536-1.87a6 6 0 0 1-2.043-6.974L17 29H7.736a2 2 0 0 1-1.906-2.606Z" }, null, -1)];
  var oc = o(ec, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, nc, 10, tc);
  }]]);
  const rc = Object.assign(oc, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + oc.name, oc);
  } }), ic = e.defineComponent({ name: "IconThumbUp", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-thumb-up`, { [`${o2}-spin`]: t2.spin }]) };
  } }), sc = ["stroke-width", "stroke-linecap", "stroke-linejoin"], lc = [e.createElementVNode("path", { d: "M7 17v26m35.17-21.394-5.948 18.697a1 1 0 0 1-.953.697H14V19h3l9.403-12.223a1 1 0 0 1 1.386-.196l2.535 1.87a6 6 0 0 1 2.044 6.974L31 19h9.265a2 2 0 0 1 1.906 2.606Z" }, null, -1)];
  var cc = o(ic, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, lc, 10, sc);
  }]]);
  const ac = Object.assign(cc, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + cc.name, cc);
  } }), pc = e.defineComponent({ name: "IconTranslate", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-translate`, { [`${o2}-spin`]: t2.spin }]) };
  } }), dc = ["stroke-width", "stroke-linecap", "stroke-linejoin"], uc = [e.createElementVNode("path", { d: "M42 25c0 9.941-8.059 18-18 18-6.867 0-12.836-3.845-15.87-9.5M28.374 27 25 18h-2l-3.375 9m8.75 0L31 34m-2.625-7h-8.75m0 0L17 34M6 25c0-9.941 8.059-18 18-18 6.867 0 12.836 3.845 15.87 9.5M43 25h-2l1-1 1 1ZM5 25h2l-1 1-1-1Z" }, null, -1)];
  var kc = o(pc, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, uc, 10, dc);
  }]]);
  const mc = Object.assign(kc, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + kc.name, kc);
  } }), vc = e.defineComponent({ name: "IconUpload", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-upload`, { [`${o2}-spin`]: t2.spin }]) };
  } }), hc = ["stroke-width", "stroke-linecap", "stroke-linejoin"], fc = [e.createElementVNode("path", { d: "M14.93 17.071 24.001 8l9.071 9.071m-9.07 16.071v-25M40 35v6H8v-6" }, null, -1)];
  var wc = o(vc, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, fc, 10, hc);
  }]]);
  const gc = Object.assign(wc, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + wc.name, wc);
  } }), bc = e.defineComponent({ name: "IconVoice", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-voice`, { [`${o2}-spin`]: t2.spin }]) };
  } }), jc = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Lc = [e.createElementVNode("path", { d: "M41 21v1c0 8.837-7.163 16-16 16h-2c-8.837 0-16-7.163-16-16v-1m17 17v6m0-14a9 9 0 0 1-9-9v-6a9 9 0 1 1 18 0v6a9 9 0 0 1-9 9Z" }, null, -1)];
  var Bc = o(bc, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Lc, 10, jc);
  }]]);
  const Cc = Object.assign(Bc, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Bc.name, Bc);
  } }), yc = e.defineComponent({ name: "IconAlignCenter", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-align-center`, { [`${o2}-spin`]: t2.spin }]) };
  } }), xc = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ec = [e.createElementVNode("path", { d: "M44 9H4m38 20H6m28-10H14m20 20H14" }, null, -1)];
  var Sc = o(yc, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ec, 10, xc);
  }]]);
  const Mc = Object.assign(Sc, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Sc.name, Sc);
  } }), Nc = e.defineComponent({ name: "IconAlignLeft", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-align-left`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Vc = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ic = [e.createElementVNode("path", { d: "M44 9H4m36 20H4m21-10H4m21 20H4" }, null, -1)];
  var Wc = o(Nc, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ic, 10, Vc);
  }]]);
  const $c = Object.assign(Wc, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Wc.name, Wc);
  } }), Zc = e.defineComponent({ name: "IconAlignRight", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-align-right`, { [`${o2}-spin`]: t2.spin }]) };
  } }), zc = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Pc = [e.createElementVNode("path", { d: "M4 9h40M8 29h36M23 19h21M23 39h21" }, null, -1)];
  var qc = o(Zc, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Pc, 10, zc);
  }]]);
  const Oc = Object.assign(qc, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + qc.name, qc);
  } }), Hc = e.defineComponent({ name: "IconBgColors", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-bg-colors`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Fc = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ac = [e.createElementVNode("path", { d: "m9.442 25.25 10.351 10.765a1 1 0 0 0 1.428.014L32 25.25H9.442Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M19 5.25 22.75 9m0 0 12.043 12.043a1 1 0 0 1 0 1.414L32 25.25M22.75 9 8.693 23.057a1 1 0 0 0-.013 1.4l.762.793m0 0 10.351 10.765a1 1 0 0 0 1.428.014L32 25.25m-22.558 0H32M6 42h36" }, null, -1), e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M40.013 29.812 37.201 27l-2.812 2.812a4 4 0 1 0 5.624 0Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Dc = o(Hc, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ac, 10, Fc);
  }]]);
  const Rc = Object.assign(Dc, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Dc.name, Dc);
  } }), Tc = e.defineComponent({ name: "IconBold", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-bold`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Uc = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Qc = [e.createElementVNode("path", { d: "M13 24h12a8 8 0 1 0 0-16H13.2a.2.2 0 0 0-.2.2V24Zm0 0h16a8 8 0 1 1 0 16H13.2a.2.2 0 0 1-.2-.2V24Z" }, null, -1)];
  var Gc = o(Tc, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Qc, 10, Uc);
  }]]);
  const Xc = Object.assign(Gc, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Gc.name, Gc);
  } }), Jc = e.defineComponent({ name: "IconBrush", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-brush`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Kc = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Yc = [e.createElementVNode("path", { d: "M33 13h7a1 1 0 0 1 1 1v12.14a1 1 0 0 1-.85.99l-21.3 3.24a1 1 0 0 0-.85.99V43M33 8v10.002A.998.998 0 0 1 32 19H8a1 1 0 0 1-1-1V8c0-.552.444-1 .997-1H32.01c.552 0 .99.447.99 1Z" }, null, -1)];
  var _c = o(Jc, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Yc, 10, Kc);
  }]]);
  const ea = Object.assign(_c, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + _c.name, _c);
  } }), ta = e.defineComponent({ name: "IconCopy", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-copy`, { [`${o2}-spin`]: t2.spin }]) };
  } }), na = ["stroke-width", "stroke-linecap", "stroke-linejoin"], oa = [e.createElementVNode("path", { d: "M20 6h18a2 2 0 0 1 2 2v22M8 16v24c0 1.105.891 2 1.996 2h20.007A1.99 1.99 0 0 0 32 40.008V15.997A1.997 1.997 0 0 0 30 14H10a2 2 0 0 0-2 2Z" }, null, -1)];
  var ra = o(ta, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, oa, 10, na);
  }]]);
  const ia = Object.assign(ra, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ra.name, ra);
  } }), sa = e.defineComponent({ name: "IconDelete", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-delete`, { [`${o2}-spin`]: t2.spin }]) };
  } }), la = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ca = [e.createElementVNode("path", { d: "M5 11h5.5m0 0v29a1 1 0 0 0 1 1h25a1 1 0 0 0 1-1V11m-27 0H16m21.5 0H43m-5.5 0H32m-16 0V7h16v4m-16 0h16M20 18v15m8-15v15" }, null, -1)];
  var aa = o(sa, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ca, 10, la);
  }]]);
  const pa = Object.assign(aa, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + aa.name, aa);
  } }), da = e.defineComponent({ name: "IconEdit", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-edit`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ua = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ka = [e.createElementVNode("path", { d: "m30.48 19.038 5.733-5.734a1 1 0 0 0 0-1.414l-5.586-5.586a1 1 0 0 0-1.414 0l-5.734 5.734m7 7L15.763 33.754a1 1 0 0 1-.59.286l-6.048.708a1 1 0 0 1-1.113-1.069l.477-6.31a1 1 0 0 1 .29-.631l14.7-14.7m7 7-7-7M6 42h36" }, null, -1)];
  var ma = o(da, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ka, 10, ua);
  }]]);
  const va = Object.assign(ma, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ma.name, ma);
  } }), ha = e.defineComponent({ name: "IconEraser", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-eraser`, { [`${o2}-spin`]: t2.spin }]) };
  } }), fa = ["stroke-width", "stroke-linecap", "stroke-linejoin"], wa = [e.createElementVNode("path", { d: "M25.5 40.503 14.914 40.5a1 1 0 0 1-.707-.293l-9-9a1 1 0 0 1 0-1.414L13.5 21.5m12 19.003L44 40.5m-18.5.003L29 37M13.5 21.5 26.793 8.207a1 1 0 0 1 1.414 0l14.086 14.086a1 1 0 0 1 0 1.414L29 37M13.5 21.5 29 37" }, null, -1)];
  var ga = o(ha, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, wa, 10, fa);
  }]]);
  const ba = Object.assign(ga, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ga.name, ga);
  } }), ja = e.defineComponent({ name: "IconFilter", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-filter`, { [`${o2}-spin`]: t2.spin }]) };
  } }), La = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ba = [e.createElementVNode("path", { d: "M30 42V22.549a1 1 0 0 1 .463-.844l10.074-6.41A1 1 0 0 0 41 14.45V8a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v6.451a1 1 0 0 0 .463.844l10.074 6.41a1 1 0 0 1 .463.844V37" }, null, -1)];
  var Ca = o(ja, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ba, 10, La);
  }]]);
  const ya = Object.assign(Ca, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ca.name, Ca);
  } }), xa = e.defineComponent({ name: "IconFindReplace", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-find-replace`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ea = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Sa = [e.createElementVNode("path", { d: "M42.353 40.854 36.01 34.51m0 0a9 9 0 0 1-15.364-6.364c0-5 4-9 9-9s9 4 9 9a8.972 8.972 0 0 1-2.636 6.364Zm5.636-26.365h-36m10 16h-10m10 16h-10" }, null, -1)];
  var Ma = o(xa, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Sa, 10, Ea);
  }]]);
  const Na = Object.assign(Ma, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ma.name, Ma);
  } }), Va = e.defineComponent({ name: "IconFontColors", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-font-colors`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ia = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Wa = [e.createElementVNode("path", { d: "M9 41h30M16.467 22 11.5 34m20.032-12L24.998 7h-2l-6.532 15h15.065Zm0 0H16.467h15.065Zm0 0L36.5 34l-4.968-12Z" }, null, -1)];
  var $a = o(Va, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Wa, 10, Ia);
  }]]);
  const Za = Object.assign($a, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + $a.name, $a);
  } }), za = e.defineComponent({ name: "IconFormula", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-formula`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Pa = ["stroke-width", "stroke-linecap", "stroke-linejoin"], qa = [e.createElementVNode("path", { d: "M40 8H10a1 1 0 0 0-1 1v.546a1 1 0 0 0 .341.753L24.17 23.273a1 1 0 0 1 .026 1.482l-.195.183L9.343 37.7a1 1 0 0 0-.343.754V39a1 1 0 0 0 1 1h30" }, null, -1)];
  var Oa = o(za, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, qa, 10, Pa);
  }]]);
  const Ha = Object.assign(Oa, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Oa.name, Oa);
  } }), Fa = e.defineComponent({ name: "IconH1", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-h1`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Aa = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Da = [e.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18M40 42V21h-1l-6 3" }, null, -1)];
  var Ra = o(Fa, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Da, 10, Aa);
  }]]);
  const Ta = Object.assign(Ra, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ra.name, Ra);
  } }), Ua = e.defineComponent({ name: "IconH2", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-h2`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Qa = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ga = [e.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18M44 40H32v-.5l7.5-9c.914-1.117 2.5-3 2.5-5 0-2.485-2.239-4.5-5-4.5s-5 2.515-5 5" }, null, -1)];
  var Xa = o(Ua, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ga, 10, Qa);
  }]]);
  const Ja = Object.assign(Xa, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Xa.name, Xa);
  } }), Ka = e.defineComponent({ name: "IconH3", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-h3`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ya = ["stroke-width", "stroke-linecap", "stroke-linejoin"], _a = [e.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18M37.001 30h-2m2 0a5 5 0 0 0 0-10h-.556a4.444 4.444 0 0 0-4.444 4.444m5 5.556a5 5 0 0 1 0 10h-.556a4.444 4.444 0 0 1-4.444-4.444" }, null, -1)];
  var ep = o(Ka, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, _a, 10, Ya);
  }]]);
  const tp = Object.assign(ep, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ep.name, ep);
  } }), np = e.defineComponent({ name: "IconH4", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-h4`, { [`${o2}-spin`]: t2.spin }]) };
  } }), op = ["stroke-width", "stroke-linecap", "stroke-linejoin"], rp = [e.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18m14.5-6H31v-1l8-15h1.5v16Zm0 0H44m-3.5 0v6" }, null, -1)];
  var ip = o(np, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, rp, 10, op);
  }]]);
  const sp = Object.assign(ip, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ip.name, ip);
  } }), lp = e.defineComponent({ name: "IconH5", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-h5`, { [`${o2}-spin`]: t2.spin }]) };
  } }), cp = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ap = [e.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18M43 21H32.5v9h.5s1.5-1 4-1a5 5 0 0 1 5 5v1a5 5 0 0 1-5 5c-2.05 0-4.728-1.234-5.5-3" }, null, -1)];
  var pp = o(lp, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ap, 10, cp);
  }]]);
  const dp = Object.assign(pp, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + pp.name, pp);
  } }), up = e.defineComponent({ name: "IconH6", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-h6`, { [`${o2}-spin`]: t2.spin }]) };
  } }), kp = ["stroke-width", "stroke-linecap", "stroke-linejoin"], mp = [e.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18M32 34.5c0 3.038 2.239 5.5 5 5.5s5-2.462 5-5.5-2.239-5.5-5-5.5-5 2.462-5 5.5Zm0 0v-5.73c0-4.444 3.867-7.677 8-7.263.437.044.736.08.952.115" }, null, -1)];
  var vp = o(up, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, mp, 10, kp);
  }]]);
  const hp = Object.assign(vp, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + vp.name, vp);
  } }), fp = e.defineComponent({ name: "IconH7", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-h7`, { [`${o2}-spin`]: t2.spin }]) };
  } }), wp = ["stroke-width", "stroke-linecap", "stroke-linejoin"], gp = [e.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18m4-21h12v1l-4.4 16-1.1 3.5" }, null, -1)];
  var bp = o(fp, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, gp, 10, wp);
  }]]);
  const jp = Object.assign(bp, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + bp.name, bp);
  } }), Lp = e.defineComponent({ name: "IconHighlight", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-highlight`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Bp = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Cp = [e.createElementVNode("path", { d: "M19 18V9.28a1 1 0 0 1 .758-.97l8-2A1 1 0 0 1 29 7.28V18m-10 0h-4a1 1 0 0 0-1 1v8h-4a1 1 0 0 0-1 1v15m10-25h10m0 0h4a1 1 0 0 1 1 1v8h4a1 1 0 0 1 1 1v15" }, null, -1)];
  var yp = o(Lp, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Cp, 10, Bp);
  }]]);
  const xp = Object.assign(yp, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + yp.name, yp);
  } }), Ep = e.defineComponent({ name: "IconItalic", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-italic`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Sp = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Mp = [e.createElementVNode("path", { d: "M18 8h9m8 0h-8m0 0-6 32m0 0h-8m8 0h9" }, null, -1)];
  var Np = o(Ep, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Mp, 10, Sp);
  }]]);
  const Vp = Object.assign(Np, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Np.name, Np);
  } }), Ip = e.defineComponent({ name: "IconLineHeight", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-line-height`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Wp = ["stroke-width", "stroke-linecap", "stroke-linejoin"], $p = [e.createElementVNode("path", { d: "M4 8h14.5M33 8H18.5m0 0v34" }, null, -1), e.createElementVNode("path", { d: "M39 9.5 37 13h4l-2-3.5ZM39 38.5 37 35h4l-2 3.5Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M39 13h2l-2-3.5-2 3.5h2Zm0 0v22m0 0h2l-2 3.5-2-3.5h2Z" }, null, -1)];
  var Zp = o(Ip, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, $p, 10, Wp);
  }]]);
  const zp = Object.assign(Zp, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Zp.name, Zp);
  } }), Pp = e.defineComponent({ name: "IconLink", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-link`, { [`${o2}-spin`]: t2.spin }]) };
  } }), qp = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Op = [e.createElementVNode("path", { d: "M29.037 15.236s-9.174 9.267-11.48 11.594c-2.305 2.327-1.646 4.987-.329 6.316 1.317 1.33 3.994 1.953 6.258-.332L37.32 18.851c3.623-3.657 2.092-8.492 0-10.639-2.093-2.147-6.916-3.657-10.54 0L11.3 23.838c-3.623 3.657-3.953 10.638.329 14.96 4.282 4.322 11.115 4.105 14.821.333 3.706-3.773 8.74-8.822 11.224-11.33" }, null, -1)];
  var Hp = o(Pp, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Op, 10, qp);
  }]]);
  const Fp = Object.assign(Hp, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Hp.name, Hp);
  } }), Ap = e.defineComponent({ name: "IconObliqueLine", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-oblique-line`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Dp = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Rp = [e.createElementVNode("path", { d: "M29.506 6.502 18.493 41.498" }, null, -1)];
  var Tp = o(Ap, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Rp, 10, Dp);
  }]]);
  const Up = Object.assign(Tp, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Tp.name, Tp);
  } }), Qp = e.defineComponent({ name: "IconOrderedList", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-ordered-list`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Gp = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Xp = [e.createElementVNode("path", { d: "M13 24h30M13 37h30M13 11h30" }, null, -1), e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M5.578 13.06v1.695h5.041V13.06H9.164V7.555H7.748L5.255 8.968l.763 1.513 1.114-.636v3.215H5.578ZM5.37 26.205v1.49h5.07V26H7.964l.94-.94c.454-.44.783-.86.982-1.258.199-.404.298-.826.298-1.266 0-.686-.224-1.225-.683-1.6-.45-.372-1.093-.55-1.912-.55-.473 0-.933.072-1.38.214a3.63 3.63 0 0 0-1.133.582l-.066.053.652 1.533.113-.085c.263-.199.524-.345.783-.44.266-.094.524-.141.774-.141.309 0 .52.06.652.165.128.1.198.252.198.477 0 .177-.05.356-.154.54l-.001.002c-.099.186-.274.416-.528.69L5.37 26.205ZM10.381 38.344c0-.443-.118-.826-.358-1.145a1.702 1.702 0 0 0-.713-.56 1.652 1.652 0 0 0 .586-.52 1.73 1.73 0 0 0 .307-1.022c0-.404-.108-.763-.327-1.074a2.076 2.076 0 0 0-.918-.71c-.386-.166-.833-.247-1.34-.247-.48 0-.952.071-1.417.213-.459.134-.836.318-1.127.554l-.065.053.652 1.486.11-.076c.275-.193.563-.34.863-.442h.002c.3-.109.581-.162.844-.162.266 0 .454.065.579.18l.004.002c.128.107.198.262.198.48 0 .201-.07.33-.197.412-.138.089-.376.141-.733.141h-1.01v1.626h1.188c.371 0 .614.056.75.15.127.085.2.23.2.463 0 .254-.078.412-.21.503l-.002.002c-.136.097-.386.157-.777.157-.595 0-1.194-.199-1.8-.605l-.11-.073-.65 1.483.064.053c.285.236.662.424 1.127.565h.002c.465.136.95.203 1.456.203.852 0 1.538-.178 2.045-.546.517-.377.777-.896.777-1.544Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Jp = o(Qp, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Xp, 10, Gp);
  }]]);
  const Kp = Object.assign(Jp, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Jp.name, Jp);
  } }), Yp = e.defineComponent({ name: "IconOriginalSize", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-original-size`, { [`${o2}-spin`]: t2.spin }]) };
  } }), _p = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ed = [e.createElementVNode("path", { d: "m5.5 11.5 5-2.5h1v32M34 11.5 39 9h1v32" }, null, -1), e.createElementVNode("path", { d: "M24 17h1v1h-1v-1ZM24 30h1v1h-1v-1Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M24 17h1v1h-1v-1ZM24 30h1v1h-1v-1Z" }, null, -1)];
  var td = o(Yp, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ed, 10, _p);
  }]]);
  const nd = Object.assign(td, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + td.name, td);
  } }), od = e.defineComponent({ name: "IconPaste", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-paste`, { [`${o2}-spin`]: t2.spin }]) };
  } }), rd = ["stroke-width", "stroke-linecap", "stroke-linejoin"], id = [e.createElementVNode("rect", { x: "8", y: "14", width: "24", height: "28", rx: "1" }, null, -1), e.createElementVNode("path", { d: "M24 6h.01v.01H24V6ZM32 6h.01v.01H32V6ZM40 6h.01v.01H40V6ZM40 13h.01v.01H40V13ZM40 21h.01v.01H40V21Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M24 6h.01v.01H24V6ZM32 6h.01v.01H32V6ZM40 6h.01v.01H40V6ZM40 13h.01v.01H40V13ZM40 21h.01v.01H40V21Z" }, null, -1)];
  var sd = o(od, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, id, 10, rd);
  }]]);
  const ld = Object.assign(sd, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + sd.name, sd);
  } }), cd = e.defineComponent({ name: "IconQuote", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-quote`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ad = ["stroke-width", "stroke-linecap", "stroke-linejoin"], pd = [e.createElementVNode("path", { d: "M18.08 33.093a6 6 0 0 1-12 0c-.212-3.593 2.686-6 6-6a6 6 0 0 1 6 6ZM39.08 33.093a6 6 0 0 1-12 0c-.212-3.593 2.686-6 6-6a6 6 0 0 1 6 6Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M6.08 33.093a6 6 0 1 0 6-6c-3.314 0-6.212 2.407-6 6Zm0 0c-.5-8.5 1-25.5 15-24m6 24a6 6 0 1 0 6-6c-3.314 0-6.212 2.407-6 6Zm0 0c-.5-8.5 1-25.5 15-24" }, null, -1)];
  var dd = o(cd, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, pd, 10, ad);
  }]]);
  const ud = Object.assign(dd, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + dd.name, dd);
  } }), kd = e.defineComponent({ name: "IconRedo", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-redo`, { [`${o2}-spin`]: t2.spin }]) };
  } }), md = ["stroke-width", "stroke-linecap", "stroke-linejoin"], vd = [e.createElementVNode("path", { d: "m32.678 23.78 7.778-7.778-7.778-7.778M39.19 16H18.5C12.149 16 7 21.15 7 27.5 7 33.852 12.149 39 18.5 39H31" }, null, -1)];
  var hd = o(kd, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, vd, 10, md);
  }]]);
  const fd = Object.assign(hd, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + hd.name, hd);
  } }), wd = e.defineComponent({ name: "IconScissor", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-scissor`, { [`${o2}-spin`]: t2.spin }]) };
  } }), gd = ["stroke-width", "stroke-linecap", "stroke-linejoin"], bd = [e.createElementVNode("path", { d: "m40.293 7.707-23.05 23.05m0 0a6 6 0 1 0-8.485 8.485 6 6 0 0 0 8.485-8.485Zm13.514 0a6 6 0 1 0 8.485 8.485 6 6 0 0 0-8.485-8.485Zm0 0L7.707 7.707" }, null, -1)];
  var jd = o(wd, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, bd, 10, gd);
  }]]);
  const Ld = Object.assign(jd, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + jd.name, jd);
  } }), Bd = e.defineComponent({ name: "IconSortAscending", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-sort-ascending`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Cd = ["stroke-width", "stroke-linecap", "stroke-linejoin"], yd = [e.createElementVNode("path", { d: "M15 6v33.759a.1.1 0 0 1-.17.07L8 33m17-6h10.4v.65L27 39.35V40h11m-1-19L31.4 8h-.8L25 21" }, null, -1)];
  var xd = o(Bd, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, yd, 10, Cd);
  }]]);
  const Ed = Object.assign(xd, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + xd.name, xd);
  } }), Sd = e.defineComponent({ name: "IconSortDescending", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-sort-descending`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Md = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Nd = [e.createElementVNode("path", { d: "M25 27h10.4v.65L27 39.35V40h11m-21.999 2V7.24a.1.1 0 0 0-.17-.07L9 14m28 7L31.4 8h-.8L25 21" }, null, -1)];
  var Vd = o(Sd, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Nd, 10, Md);
  }]]);
  const Id = Object.assign(Vd, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Vd.name, Vd);
  } }), Wd = e.defineComponent({ name: "IconSort", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-sort`, { [`${o2}-spin`]: t2.spin }]) };
  } }), $d = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Zd = [e.createElementVNode("path", { d: "M43 9H5m0 30h14m15.5-15H5" }, null, -1)];
  var zd = o(Wd, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Zd, 10, $d);
  }]]);
  const Pd = Object.assign(zd, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + zd.name, zd);
  } }), qd = e.defineComponent({ name: "IconStrikethrough", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-strikethrough`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Od = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Hd = [e.createElementVNode("path", { d: "M13 32c0 5.246 5.149 9 11.5 9S36 36.746 36 31.5c0-1.708-.5-4.5-3.5-5.695m0 0H43m-10.5 0H5M34 14.5C34 10.358 29.523 7 24 7s-10 3.358-10 7.5c0 1.794 1.6 4.21 3 5.5" }, null, -1)];
  var Fd = o(qd, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Hd, 10, Od);
  }]]);
  const Ad = Object.assign(Fd, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Fd.name, Fd);
  } }), Dd = e.defineComponent({ name: "IconUnderline", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-underline`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Rd = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Td = [e.createElementVNode("path", { d: "M13 5v17.5C13 27 15.5 33 24 33s11-5 11-10.5V5M9 41h30" }, null, -1)];
  var Ud = o(Dd, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Td, 10, Rd);
  }]]);
  const Qd = Object.assign(Ud, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ud.name, Ud);
  } }), Gd = e.defineComponent({ name: "IconUndo", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-undo`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Xd = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Jd = [e.createElementVNode("path", { d: "m15.322 23.78-7.778-7.778 7.778-7.778M8.81 16H29.5C35.851 16 41 21.15 41 27.5 41 33.852 35.851 39 29.5 39H17" }, null, -1)];
  var Kd = o(Gd, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Jd, 10, Xd);
  }]]);
  const Yd = Object.assign(Kd, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Kd.name, Kd);
  } }), _d = e.defineComponent({ name: "IconUnorderedList", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-unordered-list`, { [`${o2}-spin`]: t2.spin }]) };
  } }), eu = ["stroke-width", "stroke-linecap", "stroke-linejoin"], tu = [e.createElementVNode("path", { d: "M13 24h30M5 11h4m4 26h30M13 11h30M5 24h4M5 37h4" }, null, -1)];
  var nu = o(_d, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, tu, 10, eu);
  }]]);
  const ou = Object.assign(nu, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + nu.name, nu);
  } }), ru = e.defineComponent({ name: "IconZoomIn", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-zoom-in`, { [`${o2}-spin`]: t2.spin }]) };
  } }), iu = ["stroke-width", "stroke-linecap", "stroke-linejoin"], su = [e.createElementVNode("path", { d: "M32.607 32.607A14.953 14.953 0 0 0 37 22c0-8.284-6.716-15-15-15-8.284 0-15 6.716-15 15 0 8.284 6.716 15 15 15 4.142 0 7.892-1.679 10.607-4.393Zm0 0L41.5 41.5M29 22H15m7 7V15" }, null, -1)];
  var lu = o(ru, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, su, 10, iu);
  }]]);
  const cu = Object.assign(lu, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + lu.name, lu);
  } }), au = e.defineComponent({ name: "IconZoomOut", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-zoom-out`, { [`${o2}-spin`]: t2.spin }]) };
  } }), pu = ["stroke-width", "stroke-linecap", "stroke-linejoin"], du = [e.createElementVNode("path", { d: "M32.607 32.607A14.953 14.953 0 0 0 37 22c0-8.284-6.716-15-15-15-8.284 0-15 6.716-15 15 0 8.284 6.716 15 15 15 4.142 0 7.892-1.679 10.607-4.393Zm0 0L41.5 41.5M29 22H15" }, null, -1)];
  var uu = o(au, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, du, 10, pu);
  }]]);
  const ku = Object.assign(uu, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + uu.name, uu);
  } }), mu = e.defineComponent({ name: "IconMuteFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-mute-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), vu = ["stroke-width", "stroke-linecap", "stroke-linejoin"], hu = [e.createElementVNode("path", { d: "M5.931 13.001A2 2 0 0 0 4 15v18a2 2 0 0 0 2 2h7.37l9.483 6.639A2 2 0 0 0 26 40v-6.93L5.931 13.001ZM35.27 28.199l-3.311-3.313a7.985 7.985 0 0 0-1.96-6.107.525.525 0 0 1 .011-.718l2.122-2.122a.485.485 0 0 1 .7.008c3.125 3.393 3.938 8.15 2.439 12.252ZM41.13 34.059l-2.936-2.937c3.07-5.89 2.226-13.288-2.531-18.348a.513.513 0 0 1 .004-.713l2.122-2.122a.492.492 0 0 1 .703.006c6.322 6.64 7.202 16.56 2.639 24.114ZM26 18.928l-8.688-8.688 5.541-3.878A2 2 0 0 1 26 8v10.928Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "m7.012 4.184 35.272 35.272-2.828 2.828L4.184 7.012l2.828-2.828Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var fu = o(mu, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, hu, 10, vu);
  }]]);
  const wu = Object.assign(fu, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + fu.name, fu);
  } }), gu = e.defineComponent({ name: "IconPauseCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-pause-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), bu = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ju = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm-6-27a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1V18a1 1 0 0 0-1-1h-3Zm9 0a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1V18a1 1 0 0 0-1-1h-3Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Lu = o(gu, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ju, 10, bu);
  }]]);
  const Bu = Object.assign(Lu, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Lu.name, Lu);
  } }), Cu = e.defineComponent({ name: "IconPlayArrowFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-play-arrow-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), yu = ["stroke-width", "stroke-linecap", "stroke-linejoin"], xu = [e.createElementVNode("path", { d: "M17.533 10.974a1 1 0 0 0-1.537.844v24.356a1 1 0 0 0 1.537.844L36.67 24.84a1 1 0 0 0 0-1.688L17.533 10.974Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Eu = o(Cu, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, xu, 10, yu);
  }]]);
  const Su = Object.assign(Eu, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Eu.name, Eu);
  } }), Mu = e.defineComponent({ name: "IconPlayCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-play-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Nu = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Vu = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M44 24c0 11.046-8.954 20-20 20S4 35.046 4 24 12.954 4 24 4s20 8.954 20 20Zm-23.662-7.783C19.302 15.605 18 16.36 18 17.575v12.85c0 1.214 1.302 1.97 2.338 1.358l10.89-6.425c1.03-.607 1.03-2.11 0-2.716l-10.89-6.425Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Iu = o(Mu, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Vu, 10, Nu);
  }]]);
  const Wu = Object.assign(Iu, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Iu.name, Iu);
  } }), $u = e.defineComponent({ name: "IconSkipNextFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-skip-next-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Zu = ["stroke-width", "stroke-linecap", "stroke-linejoin"], zu = [e.createElementVNode("path", { d: "M13.585 12.145a1 1 0 0 0-1.585.81v22.09a1 1 0 0 0 1.585.81L28.878 24.81a1 1 0 0 0 0-1.622L13.585 12.145Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M33 36a1 1 0 0 1-1-1V13a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v22a1 1 0 0 1-1 1h-2Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Pu = o($u, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, zu, 10, Zu);
  }]]);
  const qu = Object.assign(Pu, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Pu.name, Pu);
  } }), Ou = e.defineComponent({ name: "IconSkipPreviousFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-skip-previous-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Hu = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Fu = [e.createElementVNode("path", { d: "M34.414 35.855a1 1 0 0 0 1.586-.81v-22.09a1 1 0 0 0-1.586-.81L19.122 23.19a1 1 0 0 0 0 1.622l15.292 11.044Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M15 12a1 1 0 0 1 1 1v22a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V13a1 1 0 0 1 1-1h2Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Au = o(Ou, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Fu, 10, Hu);
  }]]);
  const Du = Object.assign(Au, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Au.name, Au);
  } }), Ru = e.defineComponent({ name: "IconSoundFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-sound-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Tu = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Uu = [e.createElementVNode("path", { d: "m14 15 10-7v32l-10-7H6V15h8Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M24.924 6.226A2 2 0 0 1 26 8v32a2 2 0 0 1-3.147 1.639L13.37 35H6a2 2 0 0 1-2-2V15a2 2 0 0 1 2-2h7.37l9.483-6.638a2 2 0 0 1 2.07-.136ZM35.314 35.042c6.248-6.249 6.248-16.38 0-22.628l2.828-2.828c7.81 7.81 7.81 20.474 0 28.284l-2.828-2.828Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M29.657 29.728a8 8 0 0 0 0-11.314l2.828-2.828c4.687 4.686 4.687 12.284 0 16.97l-2.828-2.828Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Qu = o(Ru, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Uu, 10, Tu);
  }]]);
  const Gu = Object.assign(Qu, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Qu.name, Qu);
  } }), Xu = e.defineComponent({ name: "IconBackward", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-backward`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ju = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ku = [e.createElementVNode("path", { d: "M38.293 36.293 26.707 24.707a1 1 0 0 1 0-1.414l11.586-11.586c.63-.63 1.707-.184 1.707.707v23.172c0 .89-1.077 1.337-1.707.707ZM21 12.414v23.172c0 .89-1.077 1.337-1.707.707L7.707 24.707a1 1 0 0 1 0-1.414l11.586-11.586c.63-.63 1.707-.184 1.707.707Z" }, null, -1)];
  var Yu = o(Xu, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ku, 10, Ju);
  }]]);
  const _u = Object.assign(Yu, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Yu.name, Yu);
  } }), ek = e.defineComponent({ name: "IconForward", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-forward`, { [`${o2}-spin`]: t2.spin }]) };
  } }), tk = ["stroke-width", "stroke-linecap", "stroke-linejoin"], nk = [e.createElementVNode("path", { d: "m9.707 11.707 11.586 11.586a1 1 0 0 1 0 1.414L9.707 36.293c-.63.63-1.707.184-1.707-.707V12.414c0-.89 1.077-1.337 1.707-.707ZM27 35.586V12.414c0-.89 1.077-1.337 1.707-.707l11.586 11.586a1 1 0 0 1 0 1.414L28.707 36.293c-.63.63-1.707.184-1.707-.707Z" }, null, -1)];
  var ok = o(ek, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, nk, 10, tk);
  }]]);
  const rk = Object.assign(ok, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ok.name, ok);
  } }), ik = e.defineComponent({ name: "IconFullscreenExit", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-fullscreen-exit`, { [`${o2}-spin`]: t2.spin }]) };
  } }), sk = ["stroke-width", "stroke-linecap", "stroke-linejoin"], lk = [e.createElementVNode("path", { d: "M35 6v8a1 1 0 0 0 1 1h8M13 6v8a1 1 0 0 1-1 1H4m31 27v-8a1 1 0 0 1 1-1h8m-31 9v-8a1 1 0 0 0-1-1H4" }, null, -1)];
  var ck = o(ik, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, lk, 10, sk);
  }]]);
  const ak = Object.assign(ck, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ck.name, ck);
  } }), pk = e.defineComponent({ name: "IconFullscreen", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-fullscreen`, { [`${o2}-spin`]: t2.spin }]) };
  } }), dk = ["stroke-width", "stroke-linecap", "stroke-linejoin"], uk = [e.createElementVNode("path", { d: "M42 17V9a1 1 0 0 0-1-1h-8M6 17V9a1 1 0 0 1 1-1h8m27 23v8a1 1 0 0 1-1 1h-8M6 31v8a1 1 0 0 0 1 1h8" }, null, -1)];
  var kk = o(pk, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, uk, 10, dk);
  }]]);
  const mk = Object.assign(kk, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + kk.name, kk);
  } }), vk = e.defineComponent({ name: "IconLiveBroadcast", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-live-broadcast`, { [`${o2}-spin`]: t2.spin }]) };
  } }), hk = ["stroke-width", "stroke-linecap", "stroke-linejoin"], fk = [e.createElementVNode("path", { d: "M29 16h12a1 1 0 0 1 1 1v22a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V17a1 1 0 0 1 1-1h12m10 0 8-9m-8 9H19m0 0-8-9m17.281 21.88-6.195 4.475a1 1 0 0 1-1.586-.81v-8.262a1 1 0 0 1 1.521-.853l6.196 3.786a1 1 0 0 1 .064 1.664Z" }, null, -1)];
  var wk = o(vk, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, fk, 10, hk);
  }]]);
  const gk = Object.assign(wk, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + wk.name, wk);
  } }), bk = e.defineComponent({ name: "IconMusic", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-music`, { [`${o2}-spin`]: t2.spin }]) };
  } }), jk = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Lk = [e.createElementVNode("path", { d: "M15 37a4 4 0 1 0-8 0 4 4 0 0 0 8 0Zm0 0V18.5M41 37a4 4 0 1 0-8 0 4 4 0 0 0 8 0Zm0 0V16.5m-26 2V9.926a1 1 0 0 1 .923-.997l24-1.846A1 1 0 0 1 41 8.08v8.42m-26 2 26-2" }, null, -1)];
  var Bk = o(bk, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Lk, 10, jk);
  }]]);
  const Ck = Object.assign(Bk, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Bk.name, Bk);
  } }), yk = e.defineComponent({ name: "IconMute", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-mute`, { [`${o2}-spin`]: t2.spin }]) };
  } }), xk = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ek = [e.createElementVNode("path", { d: "m19 11.5 4.833-4.35a.1.1 0 0 1 .167.075V17m-14-1H7.1a.1.1 0 0 0-.1.1v15.8a.1.1 0 0 0 .1.1H14l9.833 8.85a.1.1 0 0 0 .167-.075V31m6.071-14.071C32.535 19.393 34 23 32.799 26m2.929-14.728C41.508 17.052 42.5 25 39.123 32M6.5 6.5l35 35" }, null, -1)];
  var Sk = o(yk, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ek, 10, xk);
  }]]);
  const Mk = Object.assign(Sk, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Sk.name, Sk);
  } }), Nk = e.defineComponent({ name: "IconPauseCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-pause-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Vk = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ik = [e.createElementVNode("path", { d: "M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1), e.createElementVNode("path", { d: "M19 19v10h1V19h-1ZM28 19v10h1V19h-1Z" }, null, -1)];
  var Wk = o(Nk, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ik, 10, Vk);
  }]]);
  const $k = Object.assign(Wk, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Wk.name, Wk);
  } }), Zk = e.defineComponent({ name: "IconPause", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-pause`, { [`${o2}-spin`]: t2.spin }]) };
  } }), zk = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Pk = [e.createElementVNode("path", { d: "M14 12h4v24h-4zM30 12h4v24h-4z" }, null, -1), e.createElementVNode("path", { fill: "currentColor", stroke: "none", d: "M14 12h4v24h-4zM30 12h4v24h-4z" }, null, -1)];
  var qk = o(Zk, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Pk, 10, zk);
  }]]);
  const Ok = Object.assign(qk, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + qk.name, qk);
  } }), Hk = e.defineComponent({ name: "IconPlayArrow", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-play-arrow`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Fk = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ak = [e.createElementVNode("path", { d: "M12.533 7.965A1 1 0 0 0 11 8.81v30.377a1 1 0 0 0 1.533.846L36.656 24.84a1 1 0 0 0 0-1.692L12.533 7.965Z" }, null, -1)];
  var Dk = o(Hk, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ak, 10, Fk);
  }]]);
  const Rk = Object.assign(Dk, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Dk.name, Dk);
  } }), Tk = e.defineComponent({ name: "IconPlayCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-play-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Uk = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Qk = [e.createElementVNode("path", { d: "M24 42c9.941 0 18-8.059 18-18S33.941 6 24 6 6 14.059 6 24s8.059 18 18 18Z" }, null, -1), e.createElementVNode("path", { d: "M19 17v14l12-7-12-7Z" }, null, -1)];
  var Gk = o(Tk, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Qk, 10, Uk);
  }]]);
  const Xk = Object.assign(Gk, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Gk.name, Gk);
  } }), Jk = e.defineComponent({ name: "IconRecordStop", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-record-stop`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Kk = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Yk = [e.createElementVNode("path", { "clip-rule": "evenodd", d: "M24 6c9.941 0 18 8.059 18 18s-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6Z" }, null, -1), e.createElementVNode("path", { d: "M19 20a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-8a1 1 0 0 1-1-1v-8Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M19 20a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-8a1 1 0 0 1-1-1v-8Z" }, null, -1)];
  var _k = o(Jk, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Yk, 10, Kk);
  }]]);
  const em = Object.assign(_k, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + _k.name, _k);
  } }), tm = e.defineComponent({ name: "IconRecord", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-record`, { [`${o2}-spin`]: t2.spin }]) };
  } }), nm = ["stroke-width", "stroke-linecap", "stroke-linejoin"], om = [e.createElementVNode("path", { "clip-rule": "evenodd", d: "M24 6c9.941 0 18 8.059 18 18s-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6Z" }, null, -1), e.createElementVNode("path", { d: "M30 24a6 6 0 1 1-12 0 6 6 0 0 1 12 0Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M30 24a6 6 0 1 1-12 0 6 6 0 0 1 12 0Z" }, null, -1)];
  var rm = o(tm, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, om, 10, nm);
  }]]);
  const im = Object.assign(rm, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + rm.name, rm);
  } }), sm = e.defineComponent({ name: "IconSkipNext", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-skip-next`, { [`${o2}-spin`]: t2.spin }]) };
  } }), lm = ["stroke-width", "stroke-linecap", "stroke-linejoin"], cm = [e.createElementVNode("path", { d: "M34 24 10 40V8l24 16Z" }, null, -1), e.createElementVNode("path", { d: "M38 6v36" }, null, -1)];
  var am = o(sm, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, cm, 10, lm);
  }]]);
  const pm = Object.assign(am, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + am.name, am);
  } }), dm = e.defineComponent({ name: "IconSkipPrevious", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-skip-previous`, { [`${o2}-spin`]: t2.spin }]) };
  } }), um = ["stroke-width", "stroke-linecap", "stroke-linejoin"], km = [e.createElementVNode("path", { d: "m14 24 24 16V8L14 24Z" }, null, -1), e.createElementVNode("path", { d: "M10 6v36" }, null, -1)];
  var mm = o(dm, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, km, 10, um);
  }]]);
  const vm = Object.assign(mm, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + mm.name, mm);
  } }), hm = e.defineComponent({ name: "IconSound", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-sound`, { [`${o2}-spin`]: t2.spin }]) };
  } }), fm = ["stroke-width", "stroke-linecap", "stroke-linejoin"], wm = [e.createElementVNode("path", { d: "m14 16 10-9v34l-10-9H6V16h8Z" }, null, -1), e.createElementVNode("path", { d: "M31.071 16.929c3.905 3.905 3.905 10.237 0 14.142M36.727 11.272c7.03 7.03 7.03 18.426 0 25.456" }, null, -1)];
  var gm = o(hm, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, wm, 10, fm);
  }]]);
  const bm = Object.assign(gm, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + gm.name, gm);
  } }), jm = e.defineComponent({ name: "IconBytedanceColor", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-bytedance-color`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Lm = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Bm = [e.createElementVNode("path", { d: "M280.416 794.112 128 829.952v-636.32l152.416 35.84z", fill: "#325AB4" }, null, -1), e.createElementVNode("path", { d: "M928 828.48 800 864V160l128 35.52z", fill: "#78E6DC" }, null, -1), e.createElementVNode("path", { d: "M480 798.304 352 832V480l128 33.696z", fill: "#3C8CFF" }, null, -1), e.createElementVNode("path", { d: "M576 449.696 704 416v352l-128-33.696z", fill: "#00C8D2" }, null, -1)];
  var Cm = o(jm, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Bm, 10, Lm);
  }]]);
  const ym = Object.assign(Cm, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Cm.name, Cm);
  } }), xm = e.defineComponent({ name: "IconLarkColor", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-lark-color`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Em = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Sm = [e.createElementVNode("path", { d: "M996.51 28.744 752.955 291.958a7.764 7.764 0 0 0-1.928 6.828 47.632 47.632 0 0 1-80.946 42.73L475.975 535.569l19.163 256.386 217.95 217.894L996.51 28.744z", fill: "#007FFF" }, null, -1), e.createElementVNode("path", { d: "M993.591 35.352 752.68 295.702a7.82 7.82 0 0 0-1.927 6.884 47.081 47.081 0 0 1-80.12 42.18L479.884 535.513a3.855 3.855 0 0 0-1.101 2.974l18.832 251.815 485.79-732.869 10.186-22.026z", fill: "#0069FF" }, null, -1), e.createElementVNode("path", { d: "m986.653 18.888-263.213 243.5a7.764 7.764 0 0 1-6.884 1.982 47.632 47.632 0 0 0-42.676 80.946L479.774 539.423l-256.33-19.273L5.494 302.255l981.16-283.367z", fill: "#00EED4" }, null, -1), e.createElementVNode("path", { d: "m980.045 21.806-260.46 240.912a7.764 7.764 0 0 1-6.773 1.927 47.081 47.081 0 0 0-42.18 80.12L479.829 535.514a3.855 3.855 0 0 1-3.028 1.101l-251.815-18.832L957.909 31.993l22.026-10.187z", fill: "#00D3B4" }, null, -1)];
  var Mm = o(xm, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Sm, 10, Em);
  }]]);
  const Nm = Object.assign(Mm, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Mm.name, Mm);
  } }), Vm = e.defineComponent({ name: "IconTiktokColor", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-tiktok-color`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Im = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Wm = [e.createStaticVNode('<path d="M928 310.4v148.8c-8 0-17.6 1.6-27.2 1.6-72 0-139.2-27.2-190.4-70.4v316.8c0 64-20.8 124.8-57.6 172.8-51.2 68.8-134.4 115.2-228.8 115.2-102.4 0-192-54.4-241.6-134.4 51.2 48 120 78.4 195.2 78.4 92.8 0 176-44.8 227.2-115.2 35.2-48 57.6-107.2 57.6-172.8V332.8c51.2 44.8 116.8 70.4 190.4 70.4 9.6 0 17.6 0 27.2-1.6v-96c14.4 3.2 27.2 4.8 41.6 4.8h6.4z" fill="#FF004F"></path><path d="M464 420.8v164.8c-11.2-3.2-24-4.8-35.2-4.8-70.4 0-128 59.2-128 131.2 0 16 3.2 30.4 8 44.8-32-24-54.4-62.4-54.4-105.6 0-72 57.6-131.2 128-131.2 12.8 0 24 1.6 35.2 4.8V419.2h9.6c12.8 0 25.6 0 36.8 1.6zM734.4 192c-28.8-25.6-49.6-60.8-60.8-97.6H712v22.4c3.2 25.6 11.2 51.2 22.4 75.2z" fill="#FF004F"></path><path d="M881.6 307.2v96c-8 1.6-17.6 1.6-27.2 1.6-72 0-139.2-27.2-190.4-70.4v316.8c0 64-20.8 124.8-57.6 172.8-52.8 70.4-134.4 115.2-227.2 115.2-75.2 0-144-30.4-195.2-78.4-27.2-44.8-43.2-96-43.2-152 0-155.2 123.2-281.6 276.8-286.4V528c-11.2-3.2-24-4.8-35.2-4.8-70.4 0-128 59.2-128 131.2 0 43.2 20.8 83.2 54.4 105.6 17.6 49.6 65.6 86.4 120 86.4 70.4 0 128-59.2 128-131.2V94.4h116.8c11.2 38.4 32 72 60.8 97.6 28.8 57.6 83.2 100.8 147.2 115.2z"></path><path d="M417.6 364.8v54.4C264 424 140.8 550.4 140.8 705.6c0 56 16 107.2 43.2 152-54.4-52.8-88-126.4-88-209.6 0-158.4 128-286.4 284.8-286.4 12.8 0 25.6 1.6 36.8 3.2z" fill="#00F7EF"></path><path d="M673.6 94.4H556.8V712c0 72-57.6 131.2-128 131.2-56 0-102.4-35.2-120-86.4 20.8 14.4 46.4 24 73.6 24 70.4 0 128-57.6 128-129.6V32h155.2v3.2c0 6.4 0 12.8 1.6 19.2 0 12.8 3.2 27.2 6.4 40zm208 153.6v57.6c-64-12.8-118.4-56-148.8-113.6 40 36.8 91.2 57.6 148.8 56z" fill="#00F7EF"></path>', 5)];
  var $m = o(Vm, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Wm, 10, Im);
  }]]);
  const Zm = Object.assign($m, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + $m.name, $m);
  } }), zm = e.defineComponent({ name: "IconXiguaColor", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-xigua-color`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Pm = ["stroke-width", "stroke-linecap", "stroke-linejoin"], qm = [e.createElementVNode("path", { d: "M381.968 38.684c-202.85 54.614-351.085 232.757-371.89 446.01C-.326 590.018 28.281 630.328 140.108 668.037c104.026 33.808 176.843 101.425 209.351 189.846 40.31 115.729 44.211 122.23 91.023 144.336 40.31 19.504 58.514 19.504 131.332 7.802 211.951-36.41 362.788-171.642 416.101-374.492C1059.434 368.965 882.59 90.697 605.623 32.183 517.2 13.978 470.39 15.279 381.968 38.684zm176.843 322.48c158.64 74.117 201.55 158.638 119.63 237.957-102.725 97.524-240.56 136.534-291.271 80.62-20.806-23.406-24.707-48.112-24.707-161.24s3.901-137.833 24.707-161.239c32.507-36.409 88.421-35.108 171.641 3.901z", fill: "#FE163E" }, null, -1)];
  var Om = o(zm, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, qm, 10, Pm);
  }]]);
  const Hm = Object.assign(Om, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Om.name, Om);
  } }), Fm = e.defineComponent({ name: "IconFaceBookCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-faceBook-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Am = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Dm = [e.createElementVNode("path", { d: "M24 1C11.29 1 1 11.29 1 24s10.29 23 23 23 23-10.29 23-23S36.71 1 24 1Zm6.172 22.88H26.18v14.404h-5.931V23.88H17.22v-4.962h3.027V15.89c0-3.993 1.695-6.414 6.414-6.414h3.993v4.962h-2.421c-1.815 0-1.936.727-1.936 1.936v2.421h4.478l-.605 5.084h.001Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Rm = o(Fm, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Dm, 10, Am);
  }]]);
  const Tm = Object.assign(Rm, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Rm.name, Rm);
  } }), Um = e.defineComponent({ name: "IconFacebookSquareFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-facebook-square-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Qm = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Gm = [e.createElementVNode("path", { d: "M43.125 2.475c.6 0 1.2.225 1.688.713.524.487.75 1.012.75 1.612v38.363c0 .6-.263 1.2-.75 1.612-.526.488-1.088.713-1.688.713H32.138V28.913h5.625l.825-6.563h-6.45v-4.275c0-2.137 1.087-3.225 3.3-3.225h3.374V9.263c-1.2-.225-2.85-.338-5.024-.338-2.513 0-4.5.75-6.038 2.25-1.538 1.5-2.288 3.675-2.288 6.375v4.8h-5.625v6.563h5.625v16.575h-20.7c-.6 0-1.2-.225-1.612-.713-.487-.487-.712-1.012-.712-1.612V4.8c0-.6.224-1.2.712-1.612.488-.488 1.012-.713 1.613-.713h38.362Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Xm = o(Um, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Gm, 10, Qm);
  }]]);
  const Jm = Object.assign(Xm, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Xm.name, Xm);
  } }), Km = e.defineComponent({ name: "IconGoogleCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-google-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ym = ["stroke-width", "stroke-linecap", "stroke-linejoin"], _m = [e.createElementVNode("path", { d: "M32.571 33.526c-2.084 1.92-4.927 3.05-8.322 3.05a12.568 12.568 0 0 1-12.572-12.577A12.58 12.58 0 0 1 24.25 11.416a12.103 12.103 0 0 1 8.414 3.277L29.061 18.3a6.787 6.787 0 0 0-4.807-1.88c-3.277 0-6.045 2.213-7.037 5.186a7.567 7.567 0 0 0-.394 2.392c0 .833.144 1.638.394 2.391.992 2.973 3.763 5.187 7.032 5.187 1.696 0 3.133-.449 4.254-1.202a5.778 5.778 0 0 0 2.513-3.8h-6.767V21.71h11.844c.15.825.227 1.682.227 2.57 0 3.835-1.371 7.055-3.749 9.246ZM24 1A23 23 0 1 0 24 47 23 23 0 0 0 24 1Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var ev = o(Km, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, _m, 10, Ym);
  }]]);
  const tv = Object.assign(ev, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ev.name, ev);
  } }), nv = e.defineComponent({ name: "IconQqCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-qq-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ov = ["stroke-width", "stroke-linecap", "stroke-linejoin"], rv = [e.createElementVNode("path", { d: "M24.007 1C11.281 1 1 11.281 1 24.007c0 13.23 11.216 23.87 24.733 22.936 11.288-.791 20.49-9.994 21.21-21.354C47.877 12.144 37.237 1 24.007 1Zm11.36 29.262s-.79 2.23-2.3 4.242c0 0 2.66.935 2.444 3.236 0 0 .072 2.66-5.68 2.444 0 0-4.026-.287-5.248-2.013h-1.079c-1.222 1.726-5.248 2.013-5.248 2.013-5.752.216-5.68-2.444-5.68-2.444-.216-2.373 2.444-3.236 2.444-3.236-1.51-2.013-2.3-4.241-2.3-4.241-3.596 5.895-3.236-.791-3.236-.791.647-3.955 3.523-6.543 3.523-6.543-.431-3.595 1.078-4.242 1.078-4.242.216-11.072 9.707-10.929 9.922-10.929.216 0 9.707-.215 9.994 10.929 0 0 1.51.647 1.079 4.242 0 0 2.876 2.588 3.523 6.543 0 0 .36 6.686-3.236.79Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var iv = o(nv, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, rv, 10, ov);
  }]]);
  const sv = Object.assign(iv, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + iv.name, iv);
  } }), lv = e.defineComponent({ name: "IconTwitterCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-twitter-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), cv = ["stroke-width", "stroke-linecap", "stroke-linejoin"], av = [e.createElementVNode("path", { d: "M24 1C11.296 1 1 11.297 1 24s10.296 23 23 23c12.703 0 23-10.297 23-23S36.703 1 24 1Zm11.698 18.592c-.13 9.818-6.408 16.542-15.78 16.965-3.864.176-6.664-1.072-9.1-2.62 2.855.456 6.397-.686 8.292-2.307-2.8-.273-4.458-1.698-5.233-3.991.808.14 1.66.103 2.43-.06-2.527-.846-4.331-2.407-4.424-5.68.709.323 1.448.626 2.43.686-1.891-1.075-3.29-5.007-1.688-7.607 2.806 3.076 6.182 5.586 11.724 5.926-1.391-5.949 6.492-9.175 9.791-5.177 1.395-.27 2.53-.799 3.622-1.374-.45 1.381-1.315 2.347-2.37 3.119 1.158-.157 2.184-.44 3.06-.872-.544 1.128-1.732 2.14-2.754 2.992Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var pv = o(lv, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, av, 10, cv);
  }]]);
  const dv = Object.assign(pv, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + pv.name, pv);
  } }), uv = e.defineComponent({ name: "IconWeiboCircleFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-weibo-circle-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), kv = ["stroke-width", "stroke-linecap", "stroke-linejoin"], mv = [e.createElementVNode("path", { d: "M24 47a23 23 0 1 1 23-23 22.988 22.988 0 0 1-23 23Zm1.276-26.994c-.544.063-2.259 1.171-1.297-1.108C25 15 20.235 15.293 17.874 16.16A23.776 23.776 0 0 0 7.649 27.283c-2.007 6.419 5.018 10.329 10.246 11.123 5.227.795 13.068-.502 16.622-4.85 2.635-3.179 3.137-7.507-1.84-8.761-1.651-.398-.69-1.088-.271-2.259a2.775 2.775 0 0 0-2.175-3.24 2.092 2.092 0 0 0-.335-.042 12.468 12.468 0 0 0-4.62.752Zm7.004-3.889a2.326 2.326 0 0 0-1.903.544c-.377.339-.418 1.338.962 1.652.458.021.913.084 1.36.188a1.836 1.836 0 0 1 1.233 2.07c-.21 1.924.878 2.237 1.652 1.714a1.647 1.647 0 0 0 .627-1.338 4.117 4.117 0 0 0-3.325-4.767c-.042-.008-.61-.063-.606-.063Zm7.423.084a8.408 8.408 0 0 0-6.838-4.6c-1.129-.126-3.512-.397-3.784 1.15a1.17 1.17 0 0 0 .857 1.4c.042 0 .084.022.126.022.523.02 1.048 0 1.568-.063a6.481 6.481 0 0 1 6.524 6.44c0 .3-.02.601-.063.9-.063.355-.105.71-.147 1.066A1.277 1.277 0 0 0 38.93 24a1.255 1.255 0 0 0 1.338-.648c.71-2.373.501-4.926-.585-7.151h.02ZM21.616 36.44c-5.457.69-10.245-1.673-10.684-5.27-.44-3.595 3.575-7.066 9.033-7.756 5.457-.69 10.245 1.672 10.705 5.269.46 3.596-3.617 7.088-9.075 7.757h.021Zm-1.484-10.266a5.181 5.181 0 0 0-5.353 4.913 4.662 4.662 0 0 0 4.935 4.391c.14-.004.28-.017.418-.042a5.503 5.503 0 0 0 5.185-5.143 4.472 4.472 0 0 0-4.746-4.182l-.44.063Zm1.003 4.244a.669.669 0 0 1-.773-.544v-.083a.76.76 0 0 1 .774-.711.642.642 0 0 1 .731.544.076.076 0 0 1 .021.062.807.807 0 0 1-.753.732Zm-2.78 2.781a1.65 1.65 0 0 1-1.861-1.422.266.266 0 0 1-.021-.125 1.844 1.844 0 0 1 1.882-1.736 1.562 1.562 0 0 1 1.819 1.297.46.46 0 0 1 .02.167 1.96 1.96 0 0 1-1.84 1.819Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var vv = o(uv, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, mv, 10, kv);
  }]]);
  const hv = Object.assign(vv, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + vv.name, vv);
  } }), fv = e.defineComponent({ name: "IconAlipayCircle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-alipay-circle`, { [`${o2}-spin`]: t2.spin }]) };
  } }), wv = ["stroke-width", "stroke-linecap", "stroke-linejoin"], gv = [e.createElementVNode("path", { d: "M10.8 27.025c-.566.456-1.174 1.122-1.35 1.968-.24 1.156-.05 2.604 1.065 3.739 1.352 1.376 3.405 1.753 4.292 1.818 2.41.174 4.978-1.02 6.913-2.384.759-.535 2.058-1.61 3.3-3.268-2.783-1.437-6.257-3.026-9.97-2.87-1.898.079-3.256.472-4.25.997Zm35.29 6.354A23.872 23.872 0 0 0 48 24C48 10.767 37.234 0 24 0S0 10.767 0 24c0 13.234 10.766 24 24 24 7.987 0 15.07-3.925 19.436-9.943a2688.801 2688.801 0 0 0-15.11-7.467c-1.999 2.277-4.953 4.56-8.29 5.554-2.097.623-3.986.86-5.963.457-1.956-.4-3.397-1.317-4.237-2.235-.428-.469-.92-1.064-1.275-1.773.033.09.056.143.056.143s-.204-.353-.361-.914a4.03 4.03 0 0 1-.157-.85 4.383 4.383 0 0 1-.009-.612 4.409 4.409 0 0 1 .078-1.128c.197-.948.601-2.054 1.649-3.08 2.3-2.251 5.38-2.372 6.976-2.363 2.363.014 6.47 1.048 9.928 2.27.958-2.04 1.573-4.221 1.97-5.676H14.31v-1.555h7.384V15.72h-8.938v-1.555h8.938v-3.108c0-.427.084-.778.777-.778h3.498v3.886h9.717v1.555H25.97v3.11h7.773s-.78 4.35-3.221 8.64c5.416 1.934 13.037 4.914 15.568 5.91Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var bv = o(fv, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, gv, 10, wv);
  }]]);
  const jv = Object.assign(bv, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + bv.name, bv);
  } }), Lv = e.defineComponent({ name: "IconCodeSandbox", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-code-sandbox`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Bv = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Cv = [e.createElementVNode("path", { d: "m25.002 1.6 17.9 10.3c.6.4 1 1 1 1.7v20.7c0 .7-.4 1.4-1 1.7l-17.9 10.4c-.6.4-1.4.4-2 0l-17.9-10.3c-.6-.4-1-1-1-1.7V13.7c0-.7.4-1.4 1-1.7l17.9-10.4c.6-.4 1.4-.4 2 0Zm13.5 12.4-7.9-4.5-6.6 4.5-6.5-4-7.3 4.3 13.8 8.7 14.5-9Zm-16.5 26.4V26.3l-14-8.9v7.9l8 5.5V37l6 3.4Zm4 0 6-3.5v-5.2l8-5.5v-8.9l-14 8.9v14.2Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var yv = o(Lv, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Cv, 10, Bv);
  }]]);
  const xv = Object.assign(yv, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + yv.name, yv);
  } }), Ev = e.defineComponent({ name: "IconCodepen", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-codepen`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Sv = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Mv = [e.createElementVNode("path", { d: "M45 15.7v17.1L24.5 44.7c-.3.2-.7.2-1 0l-20-11.5c-.3-.2-.5-.5-.5-.9V15.7c0-.4.2-.7.5-.9l20-11.6c.3-.2.7-.2 1 0l20 11.6c.3.2.5.5.5.9ZM26 9v9.8l5.5 3.2 8.5-4.9L26 9Zm-4 0L8 17.1l8.4 4.9 5.6-3.2V9Zm0 21.2L16.5 27 9 31.4 22 39v-8.8Zm17 1.2L31.4 27 26 30.2V39l13-7.6Zm2-3.4v-6l-5 3 5 3Zm-29-3-5-3v6l5-3Zm8 0 4 2 4-2-4-2-4 2Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Nv = o(Ev, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Mv, 10, Sv);
  }]]);
  const Vv = Object.assign(Nv, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Nv.name, Nv);
  } }), Iv = e.defineComponent({ name: "IconFacebook", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-facebook`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Wv = ["stroke-width", "stroke-linecap", "stroke-linejoin"], $v = [e.createElementVNode("path", { d: "M35.184 15.727 34.312 24h-6.613v24h-9.933V24h-4.95v-8.273h4.95v-4.98C17.766 4.016 20.564 0 28.518 0h6.61v8.273H30.99c-3.086 0-3.292 1.166-3.292 3.32v4.134h7.485Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Zv = o(Iv, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, $v, 10, Wv);
  }]]);
  const zv = Object.assign(Zv, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Zv.name, Zv);
  } }), Pv = e.defineComponent({ name: "IconGithub", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-github`, { [`${o2}-spin`]: t2.spin }]) };
  } }), qv = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ov = [e.createElementVNode("path", { d: "M.056 24.618c0 10.454 6.7 19.344 16.038 22.608 1.259.32 1.067-.582 1.067-1.19v-4.148c-7.265.853-7.553-3.957-8.043-4.758-.987-1.686-3.312-2.112-2.62-2.912 1.654-.853 3.34.213 5.291 3.1 1.413 2.09 4.166 1.738 5.562 1.385a6.777 6.777 0 0 1 1.856-3.253C11.687 34.112 8.55 29.519 8.55 24.057c0-2.646.874-5.082 2.586-7.045-1.088-3.243.102-6.01.26-6.422 3.11-.282 6.337 2.225 6.587 2.421 1.766-.474 3.782-.73 6.038-.73 2.266 0 4.293.26 6.069.74.603-.458 3.6-2.608 6.49-2.345.155.41 1.317 3.12.294 6.315 1.734 1.968 2.62 4.422 2.62 7.077 0 5.472-3.158 10.07-10.699 11.397a6.82 6.82 0 0 1 2.037 4.875v6.02c.042.48 0 .96.806.96 9.477-3.194 16.299-12.15 16.299-22.697C47.938 11.396 37.218.68 23.996.68 10.77.675.055 11.391.055 24.617l.001.001Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Hv = o(Pv, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ov, 10, qv);
  }]]);
  const Fv = Object.assign(Hv, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Hv.name, Hv);
  } }), Av = e.defineComponent({ name: "IconGitlab", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-gitlab`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Dv = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Rv = [e.createElementVNode("path", { d: "M45.53 26.154 39.694 6.289v-.005c-.407-1.227-1.377-1.955-2.587-1.955-1.254 0-2.277.723-2.663 1.885L30.62 17.625H17.4l-3.825-11.41c-.386-1.163-1.41-1.886-2.663-1.886-1.237 0-2.276.792-2.592 1.96l-5.83 19.865a2.047 2.047 0 0 0 .724 2.18l19.741 14.807c.14.193.332.338.557.418l.461.343.455-.343c.263-.091.483-.252.638-.477L44.8 28.33a2.03 2.03 0 0 0 .728-2.175ZM36.84 6.932c.053-.096.155-.102.187-.102.06 0 .134.016.182.161l3.183 10.704H33.24l3.6-10.763Zm-26.11.054c.047-.14.122-.156.181-.156.145 0 .156.006.183.091L14.699 17.7H7.633l3.096-10.714ZM5.076 26.502l1.511-5.213 10.843 14.475-12.354-9.262Zm3.96-6.236h6.54l4.865 15.23-11.406-15.23Zm15.01 17.877-5.743-17.877h11.48l-5.737 17.877Zm8.459-17.877h6.402L27.642 35.31l4.864-15.043Zm-2.18 15.745L41.43 21.187l1.58 5.315-12.685 9.509Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Tv = o(Av, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Rv, 10, Dv);
  }]]);
  const Uv = Object.assign(Tv, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Tv.name, Tv);
  } }), Qv = e.defineComponent({ name: "IconGoogle", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-google`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Gv = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Xv = [e.createElementVNode("path", { d: "M23.997 21.054h19.42a19.46 19.46 0 0 1 .321 3.428c0 3.875-.812 7.335-2.437 10.38-1.625 3.044-3.942 5.424-6.951 7.138-3.01 1.714-6.46 2.572-10.353 2.572-2.803 0-5.473-.54-8.009-1.621-2.535-1.08-4.723-2.54-6.562-4.38-1.84-1.839-3.3-4.026-4.38-6.562A20.223 20.223 0 0 1 3.426 24c0-2.803.54-5.473 1.62-8.009 1.08-2.535 2.54-4.723 4.38-6.562 1.84-1.84 4.027-3.3 6.562-4.38a20.223 20.223 0 0 1 8.01-1.62c5.356 0 9.955 1.794 13.794 5.384l-5.598 5.384c-2.197-2.125-4.929-3.188-8.197-3.188-2.303 0-4.433.58-6.388 1.741a12.83 12.83 0 0 0-4.648 4.728c-1.142 1.99-1.714 4.165-1.714 6.522s.572 4.531 1.714 6.523a12.83 12.83 0 0 0 4.648 4.727c1.955 1.16 4.085 1.741 6.388 1.741 1.554 0 2.982-.214 4.286-.643 1.303-.428 2.375-.964 3.214-1.607a11.63 11.63 0 0 0 2.197-2.196c.625-.822 1.084-1.598 1.38-2.33a9.84 9.84 0 0 0 .602-2.09H23.997v-7.071Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Jv = o(Qv, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Xv, 10, Gv);
  }]]);
  const Kv = Object.assign(Jv, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Jv.name, Jv);
  } }), Yv = e.defineComponent({ name: "IconQqZone", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-qq-zone`, { [`${o2}-spin`]: t2.spin }]) };
  } }), _v = ["stroke-width", "stroke-linecap", "stroke-linejoin"], eh = [e.createElementVNode("path", { d: "M25.1 3.9c.2.1.4.3.5.5l6.8 10L44 17.8c1.1.3 1.7 1.4 1.4 2.5-.1.2-.2.5-.3.7l-7.4 9.5.4 12c0 1.1-.8 2-1.9 2.1-.2 0-.5 0-.7-.1L24 40.4l-11.3 4.1c-1 .4-2.2-.2-2.6-1.2-.1-.3-.1-.6-.1-.8l.4-12L3 20.9c-.7-.9-.5-2.1.4-2.8.2-.2.4-.3.7-.3l11.6-3.4 6.8-10c.5-.9 1.7-1.1 2.6-.5ZM24 9.1l-5.9 8.7-10.1 3 6.5 8.3-.3 10.5 9.9-3.6 9.9 3.6-.3-10.5 6.5-8.3-10.1-3L24 9.1Zm5 11.5c.8 0 1.5.5 1.8 1.2.3.7.1 1.6-.5 2.1L24 29.6h5c1 0 1.9.9 1.9 1.9 0 1-.9 1.9-1.9 1.9H19c-.8 0-1.5-.5-1.8-1.2-.3-.7-.1-1.6.5-2.1l6.3-5.7h-5c-1 0-1.9-.9-1.9-1.9 0-1 .9-1.9 1.9-1.9h10Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var th = o(Yv, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, eh, 10, _v);
  }]]);
  const nh = Object.assign(th, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + th.name, th);
  } }), oh = e.defineComponent({ name: "IconQq", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-qq`, { [`${o2}-spin`]: t2.spin }]) };
  } }), rh = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ih = [e.createElementVNode("path", { d: "M7.85 32.825s1.153 3.136 3.264 5.955c0 0-3.779 1.281-3.458 4.61 0 0-.128 3.714 8.069 3.458 0 0 5.764-.45 7.494-2.88h1.52c1.73 2.432 7.494 2.88 7.494 2.88 8.193.256 8.068-3.457 8.068-3.457.318-3.33-3.458-4.611-3.458-4.611 2.11-2.82 3.264-5.955 3.264-5.955 5.122 8.259 4.611-1.154 4.611-1.154-.96-5.57-4.995-9.221-4.995-9.221.576-5.058-1.537-5.955-1.537-5.955C37.742.844 24.26 1.12 23.978 1.126 23.694 1.12 10.21.846 9.767 16.495c0 0-2.113.897-1.537 5.955 0 0-4.034 3.65-4.995 9.221.005 0-.51 9.413 4.615 1.154Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var sh = o(oh, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ih, 10, rh);
  }]]);
  const lh = Object.assign(sh, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + sh.name, sh);
  } }), ch = e.defineComponent({ name: "IconTwitter", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-twitter`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ah = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ph = [e.createElementVNode("path", { d: "M43.277 13.575c0 16.613-10.912 28.575-26.962 29.1-6.788.525-11.438-1.537-15.6-4.65 4.65.525 10.912-1.012 13.987-4.163-4.65 0-7.275-2.625-8.812-6.187h4.162C5.89 26.1 2.74 22.987 2.74 17.812c1.012.525 2.062 1.013 4.162 1.013-3.637-2.063-5.7-8.813-3.112-12.975 4.65 5.175 10.35 9.863 19.762 10.35C20.927 5.85 34.465.6 40.165 7.388c2.625-.525 4.162-1.538 6.187-2.625-.525 2.625-2.062 4.162-4.162 5.175 2.062 0 3.637-.525 5.175-1.538-.488 2.063-2.55 4.162-4.088 5.175Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var dh = o(ch, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ph, 10, ah);
  }]]);
  const uh = Object.assign(dh, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + dh.name, dh);
  } }), kh = e.defineComponent({ name: "IconWechat", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-wechat`, { [`${o2}-spin`]: t2.spin }]) };
  } }), mh = ["stroke-width", "stroke-linecap", "stroke-linejoin"], vh = [e.createElementVNode("path", { d: "M32.09 16.362a14.39 14.39 0 0 0-6.927 1.716 13.087 13.087 0 0 0-5.008 4.676 11.936 11.936 0 0 0-1.856 6.473c.01 1.137.185 2.273.517 3.36h-1.505a26.653 26.653 0 0 1-4.766-.593l-.925-.166-5.665 2.93 1.55-4.848C3.179 26.783 1.018 23.077 1 18.792a11.951 11.951 0 0 1 2.188-6.927 14.943 14.943 0 0 1 5.938-5.027 18.579 18.579 0 0 1 8.248-1.837A18.82 18.82 0 0 1 24.8 6.506a16.863 16.863 0 0 1 5.893 4.128 11.963 11.963 0 0 1 2.992 5.817 17.922 17.922 0 0 0-1.595-.09Zm-20.152-.414a2.167 2.167 0 0 0 1.505-.471c.405-.378.62-.908.593-1.46a1.881 1.881 0 0 0-.592-1.46 2.025 2.025 0 0 0-1.506-.535 2.778 2.778 0 0 0-1.67.535c-.454.323-.728.849-.728 1.401a1.708 1.708 0 0 0 .727 1.523 2.925 2.925 0 0 0 1.671.467ZM47 28.99a9.573 9.573 0 0 1-1.59 5.193c-1.128 1.6-2.52 3-4.129 4.128l1.258 4.129-4.51-2.413h-.243a20.758 20.758 0 0 1-4.6.76 15.538 15.538 0 0 1-7.03-1.59 13.089 13.089 0 0 1-5.008-4.313 10.501 10.501 0 0 1-1.838-5.939 10.29 10.29 0 0 1 1.838-5.92c1.266-1.847 3-3.334 5.008-4.313a15.579 15.579 0 0 1 7.03-1.59 14.919 14.919 0 0 1 6.761 1.59 13.286 13.286 0 0 1 5.09 4.312 10.004 10.004 0 0 1 1.94 5.966H47ZM23.407 11.955a2.77 2.77 0 0 0-1.747.534 1.65 1.65 0 0 0-.76 1.46c-.017.584.27 1.146.76 1.46.498.36 1.1.544 1.716.535a2.083 2.083 0 0 0 1.505-.472c.368-.404.561-.925.534-1.46a1.834 1.834 0 0 0-.534-1.532 1.887 1.887 0 0 0-1.532-.534h.063v.009h-.005Zm5.256 15.03a2.016 2.016 0 0 0 1.46-.498c.332-.288.525-.7.534-1.137a1.612 1.612 0 0 0-.534-1.136 2.062 2.062 0 0 0-1.46-.499 1.58 1.58 0 0 0-1.092.499c-.305.296-.49.71-.498 1.136.009.427.184.84.498 1.137.288.305.679.48 1.092.499Zm8.953 0a2.016 2.016 0 0 0 1.46-.498c.332-.288.525-.7.534-1.137a1.558 1.558 0 0 0-.593-1.136 2.12 2.12 0 0 0-1.401-.499 1.493 1.493 0 0 0-1.092.499c-.305.296-.49.71-.498 1.136.009.427.184.84.498 1.137.279.305.674.49 1.092.499Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var hh = o(kh, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, vh, 10, mh);
  }]]);
  const fh = Object.assign(hh, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + hh.name, hh);
  } }), wh = e.defineComponent({ name: "IconWechatpay", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-wechatpay`, { [`${o2}-spin`]: t2.spin }]) };
  } }), gh = ["stroke-width", "stroke-linecap", "stroke-linejoin"], bh = [e.createElementVNode("path", { d: "M17.514 29.52a1.502 1.502 0 0 1-.715.165c-.608 0-1.104-.33-1.38-.826l-.113-.219-4.357-9.493c-.054-.112-.054-.219-.054-.33 0-.444.331-.774.774-.774.165 0 .33.053.496.165l5.13 3.643c.384.218.827.384 1.323.384.277 0 .55-.054.827-.166l24.058-10.704C39.2 6.288 32.085 2.976 24.026 2.976 10.896 2.976.191 11.861.191 22.837c0 5.958 3.2 11.366 8.22 15.008.383.278.66.774.66 1.27 0 .165-.053.33-.112.496-.384 1.488-1.05 3.92-1.05 4.026a2.025 2.025 0 0 0-.112.608c0 .443.33.774.773.774.165 0 .33-.054.443-.166l5.184-3.034c.384-.219.826-.384 1.27-.384.218 0 .495.053.714.112a27.712 27.712 0 0 0 7.781 1.104c13.13 0 23.835-8.886 23.835-19.862 0-3.312-.992-6.453-2.704-9.216L17.679 29.408l-.165.112Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var jh = o(wh, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, bh, 10, gh);
  }]]);
  const Lh = Object.assign(jh, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + jh.name, jh);
  } }), Bh = e.defineComponent({ name: "IconWeibo", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-weibo`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ch = ["stroke-width", "stroke-linecap", "stroke-linejoin"], yh = [e.createElementVNode("path", { d: "M31.82 5.6c-1.445.635-1.776 2.144-.727 3.192.515.516.993.608 3.11.608 2.952 0 4.94.781 6.448 2.53 1.84 2.079 2.052 2.714 2.052 6.513 0 3.377 0 3.441.782 3.892 1.812 1.021 3.017-.24 3.44-3.616.544-4.397-2.078-9.531-6.025-11.877-2.595-1.509-7.029-2.116-9.08-1.242Zm-14.831 5.612c-3.376 1.205-6.633 3.524-10.13 7.268-8.288 8.804-7.746 17.186 1.39 21.648 9.494 4.636 22.282 3.1 29.247-3.533 5.216-4.94 4.581-11.16-1.353-13.267-1.058-.358-1.389-.634-1.232-.966.542-1.324.726-2.86.423-3.772-.939-2.86-4.343-3.523-9.403-1.812l-2.024.69.184-2.024c.212-2.383-.303-3.68-1.72-4.398-1.187-.588-3.45-.524-5.382.166Zm8.381 11.666c4.49 1.232 7.231 3.946 7.231 7.176 0 3.588-3.192 6.817-8.38 8.528-2.77.902-7.931 1.086-10.461.396-4.793-1.353-7.507-4.012-7.507-7.416 0-1.867.81-3.496 2.594-5.152 1.656-1.564 2.926-2.318 5.364-3.137 3.689-1.242 7.636-1.389 11.16-.395Zm-9.494 2.925c-3.045 1.417-4.674 3.588-4.674 6.302 0 2.475 1.086 4.159 3.469 5.428 1.84.994 5.216.902 7.268-.147 2.622-1.39 4.342-3.947 4.342-6.45-.028-2.05-1.84-4.489-3.984-5.363-1.72-.736-4.609-.616-6.421.23Zm2.199 5.667c.211.212.358.727.358 1.178 0 1.509-2.53 2.742-3.56 1.72-.57-.57-.423-1.987.24-2.65.662-.662 2.391-.818 2.962-.248Zm14.26-19.688c-1.39 1.39-.451 3.046 1.748 3.046 1.895 0 2.741.966 2.741 3.137 0 1.352.12 1.748.663 2.107 1.628 1.15 2.953-.12 2.953-2.806 0-3.285-2.355-5.76-5.695-5.999-1.509-.12-1.868-.027-2.41.515Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var xh = o(Bh, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, yh, 10, Ch);
  }]]);
  const Eh = Object.assign(xh, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + xh.name, xh);
  } }), Sh = e.defineComponent({ name: "IconChineseFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-chinese-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Mh = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Nh = [e.createElementVNode("path", { d: "M22 21h-5v4.094h5V21ZM26 25.094V21h5v4.094h-5Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 4C12.954 4 4 12.954 4 24s8.954 20 20 20 20-8.954 20-20S35.046 4 24 4Zm2 13v-5h-4v5h-6.5a2.5 2.5 0 0 0-2.5 2.5v7.094a2.5 2.5 0 0 0 2.5 2.5H22V36h4v-6.906h6.5a2.5 2.5 0 0 0 2.5-2.5V19.5a2.5 2.5 0 0 0-2.5-2.5H26Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Vh = o(Sh, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Nh, 10, Mh);
  }]]);
  const Ih = Object.assign(Vh, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Vh.name, Vh);
  } }), Wh = e.defineComponent({ name: "IconEnglishFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-english-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), $h = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Zh = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M23.2 4C12.596 4 4 12.596 4 23.2v1.6C4 35.404 12.596 44 23.2 44h1.6C35.404 44 44 35.404 44 24.8v-1.6C44 12.596 35.404 4 24.8 4h-1.6Zm-9.086 10A2.114 2.114 0 0 0 12 16.114v15.772c0 1.167.947 2.114 2.114 2.114H25v-4h-9v-4h7.778v-4H16v-4h9v-4H14.114ZM32.4 22a5.4 5.4 0 0 0-5.4 5.4V34h4v-6.6a1.4 1.4 0 0 1 2.801 0V34h4v-6.6a5.4 5.4 0 0 0-5.4-5.4Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var zh = o(Wh, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Zh, 10, $h);
  }]]);
  const Ph = Object.assign(zh, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + zh.name, zh);
  } }), qh = e.defineComponent({ name: "IconFaceFrownFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-face-frown-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Oh = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Hh = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm7.322-26.873a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-14.646 0a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25ZM31.68 32.88a1.91 1.91 0 0 1-2.694-.176 6.66 6.66 0 0 0-5.026-2.28c-1.918 0-3.701.81-4.962 2.207a1.91 1.91 0 0 1-2.834-2.559 10.476 10.476 0 0 1 7.796-3.465c3.063 0 5.916 1.321 7.896 3.58a1.909 1.909 0 0 1-.176 2.693Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Fh = o(qh, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Hh, 10, Oh);
  }]]);
  const Ah = Object.assign(Fh, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Fh.name, Fh);
  } }), Dh = e.defineComponent({ name: "IconFaceMehFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-face-meh-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Rh = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Th = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm7.321-26.873a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-14.646 0a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25ZM15.999 30a2 2 0 0 1 2-2h12a2 2 0 1 1 0 4H18a2 2 0 0 1-2-2Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Uh = o(Dh, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Th, 10, Rh);
  }]]);
  const Qh = Object.assign(Uh, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Uh.name, Uh);
  } }), Gh = e.defineComponent({ name: "IconFaceSmileFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-face-smile-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Xh = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Jh = [e.createElementVNode("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm7.321-26.873a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-14.646 0a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-.355 9.953a1.91 1.91 0 0 1 2.694.177 6.66 6.66 0 0 0 5.026 2.279c1.918 0 3.7-.81 4.961-2.206a1.91 1.91 0 0 1 2.834 2.558 10.476 10.476 0 0 1-7.795 3.466 10.477 10.477 0 0 1-7.897-3.58 1.91 1.91 0 0 1 .177-2.694Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var Kh = o(Gh, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Jh, 10, Xh);
  }]]);
  const Yh = Object.assign(Kh, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Kh.name, Kh);
  } }), _h = e.defineComponent({ name: "IconMoonFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-moon-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ef = ["stroke-width", "stroke-linecap", "stroke-linejoin"], tf = [e.createElementVNode("path", { d: "M42.108 29.769c.124-.387-.258-.736-.645-.613A17.99 17.99 0 0 1 36 30c-9.941 0-18-8.059-18-18 0-1.904.296-3.74.844-5.463.123-.387-.226-.768-.613-.645C10.558 8.334 5 15.518 5 24c0 10.493 8.507 19 19 19 8.482 0 15.666-5.558 18.108-13.231Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var nf = o(_h, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, tf, 10, ef);
  }]]);
  const of = Object.assign(nf, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + nf.name, nf);
  } }), rf = e.defineComponent({ name: "IconPenFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-pen-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), sf = ["stroke-width", "stroke-linecap", "stroke-linejoin"], lf = [e.createElementVNode("path", { fill: "currentColor", stroke: "none", d: "m31.07 8.444 8.485 8.485L19.05 37.435l-8.485-8.485zM33.9 5.615a2 2 0 0 1 2.829 0l5.657 5.657a2 2 0 0 1 0 2.829l-1.415 1.414-8.485-8.486L33.9 5.615ZM17.636 38.85 9.15 30.363l-3.61 10.83a1 1 0 0 0 1.265 1.265l10.83-3.61Z" }, null, -1)];
  var cf = o(rf, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, lf, 10, sf);
  }]]);
  const af = Object.assign(cf, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + cf.name, cf);
  } }), pf = e.defineComponent({ name: "IconSunFill", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-sun-fill`, { [`${o2}-spin`]: t2.spin }]) };
  } }), df = ["stroke-width", "stroke-linecap", "stroke-linejoin"], uf = [e.createElementVNode("circle", { cx: "24", cy: "24", r: "9", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M21 5.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5ZM21 37.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5ZM42.5 21a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5a.5.5 0 0 1 .5-.5h5ZM10.5 21a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5a.5.5 0 0 1 .5-.5h5ZM39.203 34.96a.5.5 0 0 1 0 .707l-3.536 3.536a.5.5 0 0 1-.707 0l-3.535-3.536a.5.5 0 0 1 0-.707l3.535-3.535a.5.5 0 0 1 .707 0l3.536 3.535ZM16.575 12.333a.5.5 0 0 1 0 .707l-3.535 3.535a.5.5 0 0 1-.707 0L8.797 13.04a.5.5 0 0 1 0-.707l3.536-3.536a.5.5 0 0 1 .707 0l3.535 3.536ZM13.04 39.203a.5.5 0 0 1-.707 0l-3.536-3.536a.5.5 0 0 1 0-.707l3.536-3.535a.5.5 0 0 1 .707 0l3.536 3.535a.5.5 0 0 1 0 .707l-3.536 3.536ZM35.668 16.575a.5.5 0 0 1-.708 0l-3.535-3.535a.5.5 0 0 1 0-.707l3.535-3.536a.5.5 0 0 1 .708 0l3.535 3.536a.5.5 0 0 1 0 .707l-3.535 3.535Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var kf = o(pf, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, uf, 10, df);
  }]]);
  const mf = Object.assign(kf, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + kf.name, kf);
  } }), vf = e.defineComponent({ name: "IconApps", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-apps`, { [`${o2}-spin`]: t2.spin }]) };
  } }), hf = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ff = [e.createElementVNode("path", { d: "M7 7h13v13H7zM28 7h13v13H28zM7 28h13v13H7zM28 28h13v13H28z" }, null, -1)];
  var wf = o(vf, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ff, 10, hf);
  }]]);
  const gf = Object.assign(wf, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + wf.name, wf);
  } }), bf = e.defineComponent({ name: "IconBook", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-book`, { [`${o2}-spin`]: t2.spin }]) };
  } }), jf = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Lf = [e.createElementVNode("path", { d: "M24 13 7 7v28l17 6 17-6V7l-17 6Zm0 0v27.5M29 18l7-2.5M29 25l7-2.5M29 32l7-2.5M19 18l-7-2.5m7 9.5-7-2.5m7 9.5-7-2.5" }, null, -1)];
  var Bf = o(bf, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Lf, 10, jf);
  }]]);
  const Cf = Object.assign(Bf, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Bf.name, Bf);
  } }), yf = e.defineComponent({ name: "IconBranch", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-branch`, { [`${o2}-spin`]: t2.spin }]) };
  } }), xf = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ef = [e.createElementVNode("path", { d: "M19 10a4 4 0 1 1-8 0 4 4 0 0 1 8 0ZM38 10a4 4 0 1 1-8 0 4 4 0 0 1 8 0ZM19 38a4 4 0 1 1-8 0 4 4 0 0 1 8 0ZM15 15v15m0 3.5V30m0 0c0-5 19-7 19-15" }, null, -1)];
  var Sf = o(yf, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ef, 10, xf);
  }]]);
  const Mf = Object.assign(Sf, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Sf.name, Sf);
  } }), Nf = e.defineComponent({ name: "IconBug", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-bug`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Vf = ["stroke-width", "stroke-linecap", "stroke-linejoin"], If = [e.createElementVNode("path", { d: "M24 42c-6.075 0-11-4.925-11-11V18h22v13c0 6.075-4.925 11-11 11Zm0 0V23m11 4h8M5 27h8M7 14a4 4 0 0 0 4 4h26a4 4 0 0 0 4-4m0 28v-.5a6.5 6.5 0 0 0-6.5-6.5M7 42v-.5a6.5 6.5 0 0 1 6.5-6.5M17 14a7 7 0 1 1 14 0" }, null, -1)];
  var Wf = o(Nf, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, If, 10, Vf);
  }]]);
  const $f = Object.assign(Wf, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Wf.name, Wf);
  } }), Zf = e.defineComponent({ name: "IconBulb", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-bulb`, { [`${o2}-spin`]: t2.spin }]) };
  } }), zf = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Pf = [e.createElementVNode("path", { d: "M17 42h14m6-24c0 2.823-.9 5.437-2.43 7.568-1.539 2.147-3.185 4.32-3.77 6.897l-.623 2.756A1 1 0 0 1 29.2 36H18.8a1 1 0 0 1-.976-.779l-.624-2.756c-.584-2.576-2.23-4.75-3.77-6.897A12.94 12.94 0 0 1 11 18c0-7.18 5.82-13 13-13s13 5.82 13 13Z" }, null, -1)];
  var qf = o(Zf, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Pf, 10, zf);
  }]]);
  const Of = Object.assign(qf, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + qf.name, qf);
  } }), Hf = e.defineComponent({ name: "IconCalendar", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-calendar`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ff = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Af = [e.createElementVNode("path", { d: "M7 22h34M14 5v8m20-8v8M8 41h32a1 1 0 0 0 1-1V10a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v30a1 1 0 0 0 1 1Z" }, null, -1)];
  var Df = o(Hf, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Af, 10, Ff);
  }]]);
  const Rf = Object.assign(Df, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Df.name, Df);
  } }), Tf = e.defineComponent({ name: "IconCamera", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-camera`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Uf = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Qf = [e.createElementVNode("path", { d: "m33 12-1.862-3.724A.5.5 0 0 0 30.691 8H17.309a.5.5 0 0 0-.447.276L15 12m16 14a7 7 0 1 1-14 0 7 7 0 0 1 14 0ZM7 40h34a1 1 0 0 0 1-1V13a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v26a1 1 0 0 0 1 1Z" }, null, -1)];
  var Gf = o(Tf, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Qf, 10, Uf);
  }]]);
  const Xf = Object.assign(Gf, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Gf.name, Gf);
  } }), Jf = e.defineComponent({ name: "IconCloud", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-cloud`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Kf = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Yf = [e.createElementVNode("path", { d: "M5 29a9 9 0 0 0 9 9h19c5.523 0 10-4.477 10-10 0-5.312-4.142-9.657-9.373-9.98C32.3 12.833 27.598 9 22 9c-6.606 0-11.965 5.338-12 11.935A9 9 0 0 0 5 29Z" }, null, -1)];
  var _f = o(Jf, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Yf, 10, Kf);
  }]]);
  const ew = Object.assign(_f, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + _f.name, _f);
  } }), tw = e.defineComponent({ name: "IconCommand", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-command`, { [`${o2}-spin`]: t2.spin }]) };
  } }), nw = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ow = [e.createElementVNode("path", { d: "M29 19v-6a6 6 0 1 1 6 6h-6Zm0 0v10m0-10H19m10 10v6a6 6 0 1 0 6-6h-6Zm0 0H19m0-10v10m0-10v-6a6 6 0 1 0-6 6h6Zm0 10v6a6 6 0 1 1-6-6h6Z" }, null, -1)];
  var rw = o(tw, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ow, 10, nw);
  }]]);
  const iw = Object.assign(rw, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + rw.name, rw);
  } }), sw = e.defineComponent({ name: "IconCommon", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-common`, { [`${o2}-spin`]: t2.spin }]) };
  } }), lw = ["stroke-width", "stroke-linecap", "stroke-linejoin"], cw = [e.createElementVNode("path", { d: "M24 23 7.652 14.345M24 23l16.366-8.664M24 23v19.438M7 14v20l17 9 17-9V14L24 5 7 14Z" }, null, -1)];
  var aw = o(sw, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, cw, 10, lw);
  }]]);
  const pw = Object.assign(aw, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + aw.name, aw);
  } }), dw = e.defineComponent({ name: "IconCompass", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-compass`, { [`${o2}-spin`]: t2.spin }]) };
  } }), uw = ["stroke-width", "stroke-linecap", "stroke-linejoin"], kw = [e.createElementVNode("path", { d: "M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1), e.createElementVNode("path", { d: "m21.177 21.183 10.108-4.717a.2.2 0 0 1 .266.265L26.834 26.84l-10.109 4.717a.2.2 0 0 1-.266-.266l4.718-10.108Z" }, null, -1)];
  var mw = o(dw, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, kw, 10, uw);
  }]]);
  const vw = Object.assign(mw, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + mw.name, mw);
  } }), hw = e.defineComponent({ name: "IconCopyright", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-copyright`, { [`${o2}-spin`]: t2.spin }]) };
  } }), fw = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ww = [e.createElementVNode("path", { d: "M29.292 18a8 8 0 1 0 0 12M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1)];
  var gw = o(hw, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ww, 10, fw);
  }]]);
  const bw = Object.assign(gw, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + gw.name, gw);
  } }), jw = e.defineComponent({ name: "IconDashboard", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-dashboard`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Lw = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Bw = [e.createElementVNode("path", { d: "M41.808 24c.118 4.63-1.486 9.333-5.21 13m5.21-13h-8.309m8.309 0c-.112-4.38-1.767-8.694-4.627-12M24 6c5.531 0 10.07 2.404 13.18 6M24 6c-5.724 0-10.384 2.574-13.5 6.38M24 6v7.5M37.18 12 31 17.5m-20.5-5.12L17 17.5m-6.5-5.12C6.99 16.662 5.44 22.508 6.53 28m4.872 9c-2.65-2.609-4.226-5.742-4.873-9m0 0 8.97-3.5" }, null, -1), e.createElementVNode("path", { d: "M24 32a5 5 0 1 0 0 10 5 5 0 0 0 0-10Zm0 0V19" }, null, -1)];
  var Cw = o(jw, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Bw, 10, Lw);
  }]]);
  const yw = Object.assign(Cw, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Cw.name, Cw);
  } }), xw = e.defineComponent({ name: "IconDesktop", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-desktop`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ew = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Sw = [e.createElementVNode("path", { d: "M24 32v8m0 0h-9m9 0h9M7 32h34a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v22a1 1 0 0 0 1 1Z" }, null, -1)];
  var Mw = o(xw, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Sw, 10, Ew);
  }]]);
  const Nw = Object.assign(Mw, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Mw.name, Mw);
  } }), Vw = e.defineComponent({ name: "IconDice", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-dice`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Iw = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Ww = [e.createStaticVNode('<rect x="6.998" y="7" width="34" height="34" rx="1.5"></rect><circle cx="16" cy="16" r="2"></circle><circle cx="24" cy="24" r="2"></circle><circle cx="16" cy="32" r="2"></circle><circle cx="32" cy="16" r="2"></circle><circle cx="32" cy="32" r="2"></circle><circle cx="16" cy="16" r="2" fill="currentColor" stroke="none"></circle><circle cx="24" cy="24" r="2" fill="currentColor" stroke="none"></circle><circle cx="16" cy="32" r="2" fill="currentColor" stroke="none"></circle><circle cx="32" cy="16" r="2" fill="currentColor" stroke="none"></circle><circle cx="32" cy="32" r="2" fill="currentColor" stroke="none"></circle>', 11)];
  var $w = o(Vw, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Ww, 10, Iw);
  }]]);
  const Zw = Object.assign($w, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + $w.name, $w);
  } }), zw = e.defineComponent({ name: "IconDragDotVertical", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-drag-dot-vertical`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Pw = ["stroke-width", "stroke-linecap", "stroke-linejoin"], qw = [e.createElementVNode("path", { d: "M17 8h2v2h-2V8ZM17 23h2v2h-2v-2ZM17 38h2v2h-2v-2ZM29 8h2v2h-2V8ZM29 23h2v2h-2v-2ZM29 38h2v2h-2v-2Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M17 8h2v2h-2V8ZM17 23h2v2h-2v-2ZM17 38h2v2h-2v-2ZM29 8h2v2h-2V8ZM29 23h2v2h-2v-2ZM29 38h2v2h-2v-2Z" }, null, -1)];
  var Ow = o(zw, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, qw, 10, Pw);
  }]]);
  const Hw = Object.assign(Ow, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ow.name, Ow);
  } }), Fw = e.defineComponent({ name: "IconDragDot", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-drag-dot`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Aw = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Dw = [e.createElementVNode("path", { d: "M40 17v2h-2v-2h2ZM25 17v2h-2v-2h2ZM10 17v2H8v-2h2ZM40 29v2h-2v-2h2ZM25 29v2h-2v-2h2ZM10 29v2H8v-2h2Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M40 17v2h-2v-2h2ZM25 17v2h-2v-2h2ZM10 17v2H8v-2h2ZM40 29v2h-2v-2h2ZM25 29v2h-2v-2h2ZM10 29v2H8v-2h2Z" }, null, -1)];
  var Rw = o(Fw, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Dw, 10, Aw);
  }]]);
  const Tw = Object.assign(Rw, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Rw.name, Rw);
  } }), Uw = e.defineComponent({ name: "IconDriveFile", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-drive-file`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Qw = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Gw = [e.createElementVNode("path", { d: "M38.5 17H29a1 1 0 0 1-1-1V6.5m0-.5H10a1 1 0 0 0-1 1v34a1 1 0 0 0 1 1h28a1 1 0 0 0 1-1V17L28 6Z" }, null, -1)];
  var Xw = o(Uw, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Gw, 10, Qw);
  }]]);
  const Jw = Object.assign(Xw, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Xw.name, Xw);
  } }), Kw = e.defineComponent({ name: "IconEar", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-ear`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Yw = ["stroke-width", "stroke-linecap", "stroke-linejoin"], _w = [e.createElementVNode("path", { d: "M13 15.528C14.32 12.386 18.403 6.977 23.556 7c7.944.036 14.514 8.528 10.116 15.71-4.399 7.181-5.718 10.323-6.598 14.363-.82 3.766-9.288 7.143-11.498-1.515M20 18.5c1-3.083 4.5-4.5 6.5-2 2.85 3.562-3.503 8.312-5.5 12.5" }, null, -1)];
  var eg = o(Kw, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, _w, 10, Yw);
  }]]);
  const tg = Object.assign(eg, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + eg.name, eg);
  } }), ng = e.defineComponent({ name: "IconEmail", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-email`, { [`${o2}-spin`]: t2.spin }]) };
  } }), og = ["stroke-width", "stroke-linecap", "stroke-linejoin"], rg = [e.createElementVNode("rect", { x: "6", y: "8", width: "36", height: "32", rx: "1" }, null, -1), e.createElementVNode("path", { d: "m37 17-12.43 8.606a1 1 0 0 1-1.14 0L11 17" }, null, -1)];
  var ig = o(ng, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, rg, 10, og);
  }]]);
  const sg = Object.assign(ig, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ig.name, ig);
  } }), lg = e.defineComponent({ name: "IconEmpty", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-empty`, { [`${o2}-spin`]: t2.spin }]) };
  } }), cg = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ag = [e.createElementVNode("path", { d: "M24 5v6m7 1 4-4m-18 4-4-4m28.5 22H28s-1 3-4 3-4-3-4-3H6.5M40 41H8a2 2 0 0 1-2-2v-8.46a2 2 0 0 1 .272-1.007l6.15-10.54A2 2 0 0 1 14.148 18H33.85a2 2 0 0 1 1.728.992l6.149 10.541A2 2 0 0 1 42 30.541V39a2 2 0 0 1-2 2Z" }, null, -1)];
  var pg = o(lg, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ag, 10, cg);
  }]]);
  const dg = Object.assign(pg, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + pg.name, pg);
  } }), ug = e.defineComponent({ name: "IconExperiment", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-experiment`, { [`${o2}-spin`]: t2.spin }]) };
  } }), kg = ["stroke-width", "stroke-linecap", "stroke-linejoin"], mg = [e.createElementVNode("path", { d: "M10.5 7h6m0 0v10.5l-5.25 14M16.5 7h15m0 0h6m-6 0v10.5L37 32.167M11.25 31.5l-2.344 6.853A2 2 0 0 0 10.8 41h26.758a2 2 0 0 0 1.86-2.737L37 32.167M11.25 31.5c1.916 1.833 7.05 4.4 12.25 0s11.166-1.389 13.5.667M26 22.5v.01" }, null, -1)];
  var vg = o(ug, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, mg, 10, kg);
  }]]);
  const hg = Object.assign(vg, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + vg.name, vg);
  } }), fg = e.defineComponent({ name: "IconFileAudio", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-file-audio`, { [`${o2}-spin`]: t2.spin }]) };
  } }), wg = ["stroke-width", "stroke-linecap", "stroke-linejoin"], gg = [e.createElementVNode("path", { d: "M37 42H11a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h21l7 7v27a2 2 0 0 1-2 2Z" }, null, -1), e.createElementVNode("path", { d: "M25 30a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M25 30a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm0 0-.951-12.363a.5.5 0 0 1 .58-.532L30 18" }, null, -1)];
  var bg = o(fg, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, gg, 10, wg);
  }]]);
  const jg = Object.assign(bg, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + bg.name, bg);
  } }), Lg = e.defineComponent({ name: "IconFileImage", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-file-image`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Bg = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Cg = [e.createElementVNode("path", { d: "m26 33 5-6v6h-5Zm0 0-3-4-4 4h7Zm11 9H11a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h21l7 7v27a2 2 0 0 1-2 2ZM17 19h1v1h-1v-1Z" }, null, -1)];
  var yg = o(Lg, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Cg, 10, Bg);
  }]]);
  const xg = Object.assign(yg, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + yg.name, yg);
  } }), Eg = e.defineComponent({ name: "IconFilePdf", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-file-pdf`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Sg = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Mg = [e.createElementVNode("path", { d: "M11 42h26a2 2 0 0 0 2-2V13.828a2 2 0 0 0-.586-1.414l-5.828-5.828A2 2 0 0 0 31.172 6H11a2 2 0 0 0-2 2v32a2 2 0 0 0 2 2Z" }, null, -1), e.createElementVNode("path", { d: "M22.305 21.028c.874 1.939 3.506 6.265 4.903 8.055 1.747 2.237 3.494 2.685 4.368 2.237.873-.447 1.21-4.548-7.425-2.685-7.523 1.623-7.424 3.58-6.988 4.476.728 1.193 2.522 2.627 5.678-6.266C25.699 18.79 24.489 17 23.277 17c-1.409 0-2.538.805-.972 4.028Z" }, null, -1)];
  var Ng = o(Eg, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Mg, 10, Sg);
  }]]);
  const Vg = Object.assign(Ng, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ng.name, Ng);
  } }), Ig = e.defineComponent({ name: "IconFileVideo", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-file-video`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Wg = ["stroke-width", "stroke-linecap", "stroke-linejoin"], $g = [e.createElementVNode("path", { d: "M37 42H11a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h21l7 7v27a2 2 0 0 1-2 2Z" }, null, -1), e.createElementVNode("path", { d: "M22 27.796v-6l5 3-5 3Z" }, null, -1)];
  var Zg = o(Ig, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, $g, 10, Wg);
  }]]);
  const zg = Object.assign(Zg, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Zg.name, Zg);
  } }), Pg = e.defineComponent({ name: "IconFile", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-file`, { [`${o2}-spin`]: t2.spin }]) };
  } }), qg = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Og = [e.createElementVNode("path", { d: "M16 21h16m-16 8h10m11 13H11a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h21l7 7v27a2 2 0 0 1-2 2Z" }, null, -1)];
  var Hg = o(Pg, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Og, 10, qg);
  }]]);
  const Fg = Object.assign(Hg, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Hg.name, Hg);
  } }), Ag = e.defineComponent({ name: "IconFire", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-fire`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Dg = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Rg = [e.createElementVNode("path", { d: "M17.577 27.477C20.022 22.579 17.041 12.98 24.546 6c0 0-1.156 15.55 5.36 17.181 2.145.537 2.68-5.369 4.289-8.59 0 0 .536 4.832 2.68 8.59 3.217 7.517-1 14.117-5.896 17.182-4.289 2.684-14.587 2.807-19.835-5.37-4.824-7.516 0-15.57 0-15.57s4.289 12.35 6.433 8.054Z" }, null, -1)];
  var Tg = o(Ag, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Rg, 10, Dg);
  }]]);
  const Ug = Object.assign(Tg, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Tg.name, Tg);
  } }), Qg = e.defineComponent({ name: "IconFolderAdd", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-folder-add`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Gg = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Xg = [e.createElementVNode("path", { d: "M24 19v14m-7-7h14M6 13h18l-2.527-3.557a1.077 1.077 0 0 0-.88-.443H7.06C6.474 9 6 9.448 6 10v3Zm0 0h33.882c1.17 0 2.118.895 2.118 2v21c0 1.105-.948 3-2.118 3H8.118C6.948 39 6 38.105 6 37V13Z" }, null, -1)];
  var Jg = o(Qg, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Xg, 10, Gg);
  }]]);
  const Kg = Object.assign(Jg, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Jg.name, Jg);
  } }), Yg = e.defineComponent({ name: "IconFolderDelete", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-folder-delete`, { [`${o2}-spin`]: t2.spin }]) };
  } }), _g = ["stroke-width", "stroke-linecap", "stroke-linejoin"], eb = [e.createElementVNode("path", { d: "M17 26h14M6 13h18l-2.527-3.557a1.077 1.077 0 0 0-.88-.443H7.06C6.474 9 6 9.448 6 10v3Zm0 0h33.882c1.17 0 2.118.895 2.118 2v21c0 1.105-.948 3-2.118 3H8.118C6.948 39 6 38.105 6 37V13Z" }, null, -1)];
  var tb = o(Yg, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, eb, 10, _g);
  }]]);
  const nb = Object.assign(tb, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + tb.name, tb);
  } }), ob = e.defineComponent({ name: "IconFolder", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-folder`, { [`${o2}-spin`]: t2.spin }]) };
  } }), rb = ["stroke-width", "stroke-linecap", "stroke-linejoin"], ib = [e.createElementVNode("path", { d: "M6 13h18l-2.527-3.557a1.077 1.077 0 0 0-.88-.443H7.06C6.474 9 6 9.448 6 10v3Zm0 0h33.882c1.17 0 2.118.895 2.118 2v21c0 1.105-.948 3-2.118 3H8.118C6.948 39 6 38.105 6 37V13Z" }, null, -1)];
  var sb = o(ob, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, ib, 10, rb);
  }]]);
  const lb = Object.assign(sb, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + sb.name, sb);
  } }), cb = e.defineComponent({ name: "IconGift", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-gift`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ab = ["stroke-width", "stroke-linecap", "stroke-linejoin"], pb = [e.createElementVNode("path", { d: "M13.45 14.043H8a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h32a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1h-4.893m-21.657 0c-1.036-2.833-.615-5.6 1.182-6.637 2.152-1.243 5.464.464 7.397 3.812.539.933.914 1.896 1.127 2.825m-9.706 0h9.706m0 0H25.4m0 0a10.31 10.31 0 0 1 1.128-2.825c1.933-3.348 5.244-5.055 7.397-3.812 1.797 1.037 2.217 3.804 1.182 6.637m-9.707 0h9.707M10 26.043a2 2 0 0 1 2-2h24a2 2 0 0 1 2 2v13a2 2 0 0 1-2 2H12a2 2 0 0 1-2-2v-13Z" }, null, -1)];
  var db = o(cb, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, pb, 10, ab);
  }]]);
  const ub = Object.assign(db, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + db.name, db);
  } }), kb = e.defineComponent({ name: "IconIdcard", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-idcard`, { [`${o2}-spin`]: t2.spin }]) };
  } }), mb = ["stroke-width", "stroke-linecap", "stroke-linejoin"], vb = [e.createElementVNode("path", { d: "M11 17h9m-9 7h9m-9 7h5m-8 9h32a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v28a2 2 0 0 0 2 2Z" }, null, -1), e.createElementVNode("path", { d: "M36 33a7 7 0 1 0-14 0" }, null, -1), e.createElementVNode("circle", { cx: "29", cy: "20", r: "4" }, null, -1)];
  var hb = o(kb, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, vb, 10, mb);
  }]]);
  const fb = Object.assign(hb, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + hb.name, hb);
  } }), wb = e.defineComponent({ name: "IconImageClose", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-image-close`, { [`${o2}-spin`]: t2.spin }]) };
  } }), gb = ["stroke-width", "stroke-linecap", "stroke-linejoin"], bb = [e.createElementVNode("path", { d: "m24 33 9-8.5V27s-2 1-3.5 2.5C27.841 31.159 27 33 27 33h-3Zm0 0-3.5-4.5L17 33h7Zm17-7V9a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v30a2 2 0 0 0 2 2h17M15 15h2v2h-2v-2Z" }, null, -1), e.createElementVNode("path", { d: "M20.5 28.5 17 33h7l-3.5-4.5ZM33 24.5 24 33h3s.841-1.841 2.5-3.5C31 28 33 27 33 27v-2.5ZM15 15h2v2h-2zM46 38a8 8 0 1 1-16 0 8 8 0 0 1 16 0Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "m34.088 34.088 3.916 3.916m0 0 3.916 3.916m-3.916-3.916 3.916-3.916m-3.916 3.916-3.916 3.916", stroke: "#fff" }, null, -1)];
  var jb = o(wb, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, bb, 10, gb);
  }]]);
  const Lb = Object.assign(jb, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + jb.name, jb);
  } }), Bb = e.defineComponent({ name: "IconImage", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-image`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Cb = ["stroke-width", "stroke-linecap", "stroke-linejoin"], yb = [e.createElementVNode("path", { d: "m24 33 9-9v9h-9Zm0 0-3.5-4.5L17 33h7Zm15 8H9a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h30a2 2 0 0 1 2 2v30a2 2 0 0 1-2 2ZM15 15h2v2h-2v-2Z" }, null, -1), e.createElementVNode("path", { d: "M33 33v-9l-9 9h9ZM23.5 33l-3-4-3 4h6ZM15 15h2v2h-2z", fill: "currentColor", stroke: "none" }, null, -1)];
  var xb = o(Bb, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, yb, 10, Cb);
  }]]);
  const Eb = Object.assign(xb, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + xb.name, xb);
  } }), Sb = e.defineComponent({ name: "IconInteraction", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-interaction`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Mb = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Nb = [e.createElementVNode("path", { d: "M8 19h16m16 0H24m0 0v23m14 0H10a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h28a2 2 0 0 1 2 2v32a2 2 0 0 1-2 2Z" }, null, -1)];
  var Vb = o(Sb, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Nb, 10, Mb);
  }]]);
  const Ib = Object.assign(Vb, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Vb.name, Vb);
  } }), Wb = e.defineComponent({ name: "IconLanguage", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-language`, { [`${o2}-spin`]: t2.spin }]) };
  } }), $b = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Zb = [e.createElementVNode("path", { d: "m42 43-2.385-6M26 43l2.384-6m11.231 0-.795-2-4.18-10h-1.28l-4.181 10-.795 2m11.231 0h-11.23M17 5l1 5M5 11h26M11 11s1.889 7.826 6.611 12.174C22.333 27.522 30 31 30 31" }, null, -1), e.createElementVNode("path", { d: "M25 11s-1.889 7.826-6.611 12.174C13.667 27.522 6 31 6 31" }, null, -1)];
  var zb = o(Wb, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Zb, 10, $b);
  }]]);
  const Pb = Object.assign(zb, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + zb.name, zb);
  } }), qb = e.defineComponent({ name: "IconLayout", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-layout`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Ob = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Hb = [e.createElementVNode("path", { d: "M19 40V8m23 2a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v28a2 2 0 0 0 2 2h32a2 2 0 0 0 2-2V10Z" }, null, -1)];
  var Fb = o(qb, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Hb, 10, Ob);
  }]]);
  const Ab = Object.assign(Fb, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Fb.name, Fb);
  } }), Db = e.defineComponent({ name: "IconLoading", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-loading`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Rb = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Tb = [e.createElementVNode("path", { d: "M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6" }, null, -1)];
  var Ub = o(Db, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Tb, 10, Rb);
  }]]);
  const Qb = Object.assign(Ub, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ub.name, Ub);
  } }), Gb = e.defineComponent({ name: "IconLocation", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-location`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Xb = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Jb = [e.createElementVNode("circle", { cx: "24", cy: "19", r: "5" }, null, -1), e.createElementVNode("path", { d: "M39 20.405C39 28.914 24 43 24 43S9 28.914 9 20.405C9 11.897 15.716 5 24 5c8.284 0 15 6.897 15 15.405Z" }, null, -1)];
  var Kb = o(Gb, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Jb, 10, Xb);
  }]]);
  const Yb = Object.assign(Kb, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Kb.name, Kb);
  } }), _b = e.defineComponent({ name: "IconLock", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-lock`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ej = ["stroke-width", "stroke-linecap", "stroke-linejoin"], tj = [e.createElementVNode("path", { d: "M9 41.5h30a2 2 0 0 0 2-2v-20a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v20a2 2 0 0 0 2 2ZM16 14.5a8 8 0 1 1 16 0v3H16v-3Z" }, null, -1), e.createElementVNode("path", { d: "M28 29.5a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z" }, null, -1)];
  var nj = o(_b, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, tj, 10, ej);
  }]]);
  const oj = Object.assign(nj, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + nj.name, nj);
  } }), rj = e.defineComponent({ name: "IconLoop", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-loop`, { [`${o2}-spin`]: t2.spin }]) };
  } }), ij = ["stroke-width", "stroke-linecap", "stroke-linejoin"], sj = [e.createElementVNode("path", { d: "M24 38c-7.732 0-14-6.268-14-14 0-3.815 1.526-7.273 4-9.798M24 10c7.732 0 14 6.268 14 14 0 3.815-1.526 7.273-4 9.798M24 7v6l-4-3 4-3Zm0 33v-6l4 3-4 3Z" }, null, -1)];
  var lj = o(rj, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, sj, 10, ij);
  }]]);
  const cj = Object.assign(lj, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + lj.name, lj);
  } }), aj = e.defineComponent({ name: "IconMan", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-man`, { [`${o2}-spin`]: t2.spin }]) };
  } }), pj = ["stroke-width", "stroke-linecap", "stroke-linejoin"], dj = [e.createElementVNode("path", { d: "M40 8 29.68 18.321M31 8h9v9m-7 10c0 7.18-5.82 13-13 13S7 34.18 7 27s5.82-13 13-13 13 5.82 13 13Z" }, null, -1)];
  var uj = o(aj, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, dj, 10, pj);
  }]]);
  const kj = Object.assign(uj, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + uj.name, uj);
  } }), mj = e.defineComponent({ name: "IconMenu", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-menu`, { [`${o2}-spin`]: t2.spin }]) };
  } }), vj = ["stroke-width", "stroke-linecap", "stroke-linejoin"], hj = [e.createElementVNode("path", { d: "M5 10h38M5 24h38M5 38h38" }, null, -1)];
  var fj = o(mj, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, hj, 10, vj);
  }]]);
  const wj = Object.assign(fj, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + fj.name, fj);
  } }), gj = e.defineComponent({ name: "IconMindMapping", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-mind-mapping`, { [`${o2}-spin`]: t2.spin }]) };
  } }), bj = ["stroke-width", "stroke-linecap", "stroke-linejoin"], jj = [e.createElementVNode("path", { d: "M20 10h23M20 24h23M20 38h23M9 12v28m0-28a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 26h7M9 24h7" }, null, -1)];
  var Lj = o(gj, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, jj, 10, bj);
  }]]);
  const Bj = Object.assign(Lj, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Lj.name, Lj);
  } }), Cj = e.defineComponent({ name: "IconMobile", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-mobile`, { [`${o2}-spin`]: t2.spin }]) };
  } }), yj = ["stroke-width", "stroke-linecap", "stroke-linejoin"], xj = [e.createElementVNode("path", { d: "M17 14h14m6.125 28h-26.25C9.839 42 9 41.105 9 40V8c0-1.105.84-2 1.875-2h26.25C38.16 6 39 6.895 39 8v32c0 1.105-.84 2-1.875 2ZM22 33a2 2 0 1 1 4 0 2 2 0 0 1-4 0Z" }, null, -1), e.createElementVNode("circle", { cx: "24", cy: "33", r: "2", fill: "currentColor", stroke: "none" }, null, -1)];
  var Ej = o(Cj, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, xj, 10, yj);
  }]]);
  const Sj = Object.assign(Ej, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ej.name, Ej);
  } }), Mj = e.defineComponent({ name: "IconMoon", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-moon`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Nj = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Vj = [e.createElementVNode("path", { d: "M39.979 29.241c.11-.344-.23-.654-.574-.544-1.53.487-3.162.75-4.855.75-8.834 0-15.997-7.163-15.997-15.997 0-1.693.263-3.324.75-4.855.11-.344-.2-.684-.544-.574C11.939 10.19 7 16.576 7 24.114 7 33.44 14.56 41 23.886 41c7.538 0 13.923-4.94 16.093-11.759Z" }, null, -1)];
  var Ij = o(Mj, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Vj, 10, Nj);
  }]]);
  const Wj = Object.assign(Ij, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Ij.name, Ij);
  } }), $j = e.defineComponent({ name: "IconMosaic", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-mosaic`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Zj = ["stroke-width", "stroke-linecap", "stroke-linejoin"], zj = [e.createElementVNode("path", { d: "M6 7h4v4H6V7ZM6 23h4v4H6v-4ZM6 38h4v4H6v-4ZM14 15h4v4h-4v-4ZM14 31h4v4h-4v-4ZM22 7h4v4h-4V7ZM22 23h4v4h-4v-4ZM22 38h4v4h-4v-4ZM30 15h4v4h-4v-4ZM30 31h4v4h-4v-4ZM38 7h4v4h-4V7ZM38 23h4v4h-4v-4ZM38 38h4v4h-4v-4Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M6 7h4v4H6V7ZM6 23h4v4H6v-4ZM6 38h4v4H6v-4ZM14 15h4v4h-4v-4ZM14 31h4v4h-4v-4ZM22 7h4v4h-4V7ZM22 23h4v4h-4v-4ZM22 38h4v4h-4v-4ZM30 15h4v4h-4v-4ZM30 31h4v4h-4v-4ZM38 7h4v4h-4V7ZM38 23h4v4h-4v-4ZM38 38h4v4h-4v-4Z" }, null, -1)];
  var Pj = o($j, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, zj, 10, Zj);
  }]]);
  const qj = Object.assign(Pj, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Pj.name, Pj);
  } }), Oj = e.defineComponent({ name: "IconNav", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-nav`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Hj = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Fj = [e.createElementVNode("path", { d: "M6 19h10m0 0h26m-26 0V9m0 10v10m0 0v10m0-10H6m10 0h26M6 9h36v30H6V9Z" }, null, -1)];
  var Aj = o(Oj, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Fj, 10, Hj);
  }]]);
  const Dj = Object.assign(Aj, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Aj.name, Aj);
  } }), Rj = e.defineComponent({ name: "IconNotificationClose", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-notification-close`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Tj = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Uj = [e.createElementVNode("path", { d: "M11 35V22c0-1.835.38-3.58 1.066-5.163M11 35H6m5 0h15.5M24 9c7.18 0 13 5.82 13 13v7.5M24 9V4m0 5a12.94 12.94 0 0 0-6.5 1.74M17 42h14M6 4l36 40" }, null, -1)];
  var Qj = o(Rj, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Uj, 10, Tj);
  }]]);
  const Gj = Object.assign(Qj, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Qj.name, Qj);
  } }), Xj = e.defineComponent({ name: "IconNotification", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-notification`, { [`${o2}-spin`]: t2.spin }]) };
  } }), Jj = ["stroke-width", "stroke-linecap", "stroke-linejoin"], Kj = [e.createElementVNode("path", { d: "M24 9c7.18 0 13 5.82 13 13v13H11V22c0-7.18 5.82-13 13-13Zm0 0V4M6 35h36m-25 7h14" }, null, -1)];
  var Yj = o(Xj, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, Kj, 10, Jj);
  }]]);
  const _j = Object.assign(Yj, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + Yj.name, Yj);
  } }), eL = e.defineComponent({ name: "IconPen", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-pen`, { [`${o2}-spin`]: t2.spin }]) };
  } }), tL = ["stroke-width", "stroke-linecap", "stroke-linejoin"], nL = [e.createElementVNode("path", { d: "m28.364 11.565 7.07 7.071M7.15 32.778 33.313 6.615l7.071 7.071L14.221 39.85h-7.07v-7.07Z" }, null, -1)];
  var oL = o(eL, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, nL, 10, tL);
  }]]);
  const rL = Object.assign(oL, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + oL.name, oL);
  } }), iL = e.defineComponent({ name: "IconPhone", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-phone`, { [`${o2}-spin`]: t2.spin }]) };
  } }), sL = ["stroke-width", "stroke-linecap", "stroke-linejoin"], lL = [e.createElementVNode("path", { d: "M6.707 34.284a1 1 0 0 1 0-1.414l5.657-5.657a1 1 0 0 1 1.414 0l4.95 4.95s3.535-1.414 7.778-5.657c4.243-4.243 5.657-7.778 5.657-7.778l-4.95-4.95a1 1 0 0 1 0-1.414l5.657-5.657a1 1 0 0 1 1.414 0l6.01 6.01s3.183 7.425-8.485 19.092c-11.667 11.668-19.092 8.485-19.092 8.485l-6.01-6.01Z" }, null, -1)];
  var cL = o(iL, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, lL, 10, sL);
  }]]);
  const aL = Object.assign(cL, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + cL.name, cL);
  } }), pL = e.defineComponent({ name: "IconPrinter", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-printer`, { [`${o2}-spin`]: t2.spin }]) };
  } }), dL = ["stroke-width", "stroke-linecap", "stroke-linejoin"], uL = [e.createElementVNode("path", { d: "M14 15V8a1 1 0 0 1 1-1h18a1 1 0 0 1 1 1v7m-20 0H7a1 1 0 0 0-1 1v17a1 1 0 0 0 1 1h6m1-19h20m0 0h7a1 1 0 0 1 1 1v17a1 1 0 0 1-1 1h-6m-22 0v6a1 1 0 0 0 1 1h20a1 1 0 0 0 1-1v-6m-22 0v-5a1 1 0 0 1 1-1h20a1 1 0 0 1 1 1v5" }, null, -1)];
  var kL = o(pL, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, uL, 10, dL);
  }]]);
  const mL = Object.assign(kL, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + kL.name, kL);
  } }), vL = e.defineComponent({ name: "IconPublic", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-public`, { [`${o2}-spin`]: t2.spin }]) };
  } }), hL = ["stroke-width", "stroke-linecap", "stroke-linejoin"], fL = [e.createElementVNode("path", { d: "M15 21.5 6.704 19M15 21.5l4.683 5.152a1 1 0 0 1 .25.814L18 40.976l10.918-16.117a1 1 0 0 0-.298-1.409L21.5 19 15 21.5Zm0 0 6.062-6.995a1 1 0 0 0 .138-1.103L18 7.024M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1)];
  var wL = o(vL, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, fL, 10, hL);
  }]]);
  const gL = Object.assign(wL, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + wL.name, wL);
  } }), bL = e.defineComponent({ name: "IconPushpin", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-pushpin`, { [`${o2}-spin`]: t2.spin }]) };
  } }), jL = ["stroke-width", "stroke-linecap", "stroke-linejoin"], LL = [e.createElementVNode("path", { d: "M19.921 28.163 7.193 40.89m12.728-12.728 8.884 8.883c.17.17.447.17.617 0l5.12-5.12a7.862 7.862 0 0 0 1.667-8.655.093.093 0 0 1 .02-.102l4.906-4.906a2 2 0 0 0 0-2.828L32.648 6.95a2 2 0 0 0-2.828 0l-4.89 4.889a.126.126 0 0 1-.139.027 7.828 7.828 0 0 0-8.618 1.66l-5.027 5.026a.591.591 0 0 0 0 .836l8.774 8.775Z" }, null, -1)];
  var BL = o(bL, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, LL, 10, jL);
  }]]);
  const CL = Object.assign(BL, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + BL.name, BL);
  } }), yL = e.defineComponent({ name: "IconQrcode", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-qrcode`, { [`${o2}-spin`]: t2.spin }]) };
  } }), xL = ["stroke-width", "stroke-linecap", "stroke-linejoin"], EL = [e.createElementVNode("path", { d: "M24 30v4m0 3v6m19-19h-6m-3 0h-4M7 7h17v17H7V7Zm0 25h9v9H7v-9Zm25 0h9v9h-9v-9Zm0-25h9v9h-9V7Zm-18 7h3v3h-3v-3Z" }, null, -1)];
  var SL = o(yL, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, EL, 10, xL);
  }]]);
  const ML = Object.assign(SL, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + SL.name, SL);
  } }), NL = e.defineComponent({ name: "IconRobotAdd", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-robot-add`, { [`${o2}-spin`]: t2.spin }]) };
  } }), VL = ["stroke-width", "stroke-linecap", "stroke-linejoin"], IL = [e.createElementVNode("path", { d: "M24 7v6m0-6h5m-5 0h-5M3 21v11m25 8H9V13h30v11m-7 11h14m-7-7v14M18 26h1v1h-1v-1Zm11 0h1v1h-1v-1Z" }, null, -1)];
  var WL = o(NL, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, IL, 10, VL);
  }]]);
  const $L = Object.assign(WL, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + WL.name, WL);
  } }), ZL = e.defineComponent({ name: "IconRobot", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-robot`, { [`${o2}-spin`]: t2.spin }]) };
  } }), zL = ["stroke-width", "stroke-linecap", "stroke-linejoin"], PL = [e.createElementVNode("path", { d: "M18 26h1v1h-1v-1ZM29 26h1v1h-1v-1Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M24 7v6m0-6h5m-5 0h-5M3 21v11m36 8H9V13h30v29m6-21v11m-27-6h1v1h-1v-1Zm11 0h1v1h-1v-1Z" }, null, -1)];
  var qL = o(ZL, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, PL, 10, zL);
  }]]);
  const OL = Object.assign(qL, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + qL.name, qL);
  } }), HL = e.defineComponent({ name: "IconSafe", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-safe`, { [`${o2}-spin`]: t2.spin }]) };
  } }), FL = ["stroke-width", "stroke-linecap", "stroke-linejoin"], AL = [e.createElementVNode("path", { d: "m16.825 22.165 6 6 10-10M24 6c7 4 16 5 16 5v15s-2 12-16 16.027C10 38 8 26 8 26V11s9-1 16-5Z" }, null, -1)];
  var DL = o(HL, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, AL, 10, FL);
  }]]);
  const RL = Object.assign(DL, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + DL.name, DL);
  } }), TL = e.defineComponent({ name: "IconSchedule", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-schedule`, { [`${o2}-spin`]: t2.spin }]) };
  } }), UL = ["stroke-width", "stroke-linecap", "stroke-linejoin"], QL = [e.createElementVNode("circle", { cx: "24", cy: "24", r: "18" }, null, -1), e.createElementVNode("path", { d: "M24 13v10l6.5 7" }, null, -1)];
  var GL = o(TL, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, QL, 10, UL);
  }]]);
  const XL = Object.assign(GL, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + GL.name, GL);
  } }), JL = e.defineComponent({ name: "IconShake", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-shake`, { [`${o2}-spin`]: t2.spin }]) };
  } }), KL = ["stroke-width", "stroke-linecap", "stroke-linejoin"], YL = [e.createElementVNode("path", { d: "M43.092 27.536 31.778 38.849M20.465 4.91 9.15 16.221m9.192 14.85a1 1 0 1 1-1.414-1.415 1 1 0 0 1 1.414 1.414ZM6.323 28.95 19.05 41.678a1 1 0 0 0 1.415 0l21.213-21.213a1 1 0 0 0 0-1.415L28.95 6.322a1 1 0 0 0-1.415 0L6.322 27.536a1 1 0 0 0 0 1.414Z" }, null, -1), e.createElementVNode("circle", { cx: "17.637", cy: "30.364", r: "1", transform: "rotate(45 17.637 30.364)", fill: "currentColor", stroke: "none" }, null, -1)];
  var _L = o(JL, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, YL, 10, KL);
  }]]);
  const eB = Object.assign(_L, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + _L.name, _L);
  } }), tB = e.defineComponent({ name: "IconSkin", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-skin`, { [`${o2}-spin`]: t2.spin }]) };
  } }), nB = ["stroke-width", "stroke-linecap", "stroke-linejoin"], oB = [e.createElementVNode("path", { d: "M17.936 6H7a1 1 0 0 0-1 1v17.559a1 1 0 0 0 1 1h4V40a1 1 0 0 0 1 1h24a1 1 0 0 0 1-1V25.559h4a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H30.064C28.854 7.23 26.59 9.059 24 9.059S19.147 7.23 17.936 6Z" }, null, -1)];
  var rB = o(tB, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, oB, 10, nB);
  }]]);
  const iB = Object.assign(rB, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + rB.name, rB);
  } }), sB = e.defineComponent({ name: "IconStamp", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-stamp`, { [`${o2}-spin`]: t2.spin }]) };
  } }), lB = ["stroke-width", "stroke-linecap", "stroke-linejoin"], cB = [e.createElementVNode("path", { d: "M7 33a1 1 0 0 1 1-1h32a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-7ZM29.081 21.18a8 8 0 1 0-10.163 0L14 32h20l-4.919-10.82Z" }, null, -1)];
  var aB = o(sB, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, cB, 10, lB);
  }]]);
  const pB = Object.assign(aB, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + aB.name, aB);
  } }), dB = e.defineComponent({ name: "IconStorage", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-storage`, { [`${o2}-spin`]: t2.spin }]) };
  } }), uB = ["stroke-width", "stroke-linecap", "stroke-linejoin"], kB = [e.createElementVNode("path", { d: "M7 18h34v12H7V18ZM40 6H8a1 1 0 0 0-1 1v11h34V7a1 1 0 0 0-1-1ZM7 30h34v11a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1V30Z" }, null, -1), e.createElementVNode("path", { d: "M13.02 36H13v.02h.02V36Z" }, null, -1), e.createElementVNode("path", { d: "M13 12v-2h-2v2h2Zm.02 0h2v-2h-2v2Zm0 .02v2h2v-2h-2Zm-.02 0h-2v2h2v-2ZM13 14h.02v-4H13v4Zm-1.98-2v.02h4V12h-4Zm2-1.98H13v4h.02v-4Zm1.98 2V12h-4v.02h4Z", fill: "currentColor", stroke: "none" }, null, -1), e.createElementVNode("path", { d: "M13.02 24H13v.02h.02V24Z" }, null, -1)];
  var mB = o(dB, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, kB, 10, uB);
  }]]);
  const vB = Object.assign(mB, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + mB.name, mB);
  } }), hB = e.defineComponent({ name: "IconSubscribeAdd", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-subscribe-add`, { [`${o2}-spin`]: t2.spin }]) };
  } }), fB = ["stroke-width", "stroke-linecap", "stroke-linejoin"], wB = [e.createElementVNode("path", { d: "M24.53 6.007H9.97c-.535 0-.97.449-.97 1.003V41.8c0 .148.152.245.28.179l15.25-7.881 14.248 7.88c.129.067.28-.03.28-.179V22.06M27.413 11.023h6.794m0 0H41m-6.794 0V4m0 7.023v7.023" }, null, -1)];
  var gB = o(hB, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, wB, 10, fB);
  }]]);
  const bB = Object.assign(gB, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + gB.name, gB);
  } }), jB = e.defineComponent({ name: "IconSubscribe", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-subscribe`, { [`${o2}-spin`]: t2.spin }]) };
  } }), LB = ["stroke-width", "stroke-linecap", "stroke-linejoin"], BB = [e.createElementVNode("path", { d: "M9 7v34.667a.2.2 0 0 0 .294.176L24 34l14.706 7.843a.2.2 0 0 0 .294-.176V7a1 1 0 0 0-1-1H10a1 1 0 0 0-1 1Z" }, null, -1)];
  var CB = o(jB, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, BB, 10, LB);
  }]]);
  const yB = Object.assign(CB, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + CB.name, CB);
  } }), xB = e.defineComponent({ name: "IconSubscribed", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-subscribed`, { [`${o2}-spin`]: t2.spin }]) };
  } }), EB = ["stroke-width", "stroke-linecap", "stroke-linejoin"], SB = [e.createElementVNode("path", { d: "m31.289 15.596-9.193 9.193-4.95-4.95M24 34l14.706 7.843a.2.2 0 0 0 .294-.176V7a1 1 0 0 0-1-1H10a1 1 0 0 0-1 1v34.667a.2.2 0 0 0 .294.176L24 34Z" }, null, -1)];
  var MB = o(xB, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, SB, 10, EB);
  }]]);
  const NB = Object.assign(MB, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + MB.name, MB);
  } }), VB = e.defineComponent({ name: "IconSun", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-sun`, { [`${o2}-spin`]: t2.spin }]) };
  } }), IB = ["stroke-width", "stroke-linecap", "stroke-linejoin"], WB = [e.createElementVNode("circle", { cx: "24", cy: "24", r: "7" }, null, -1), e.createElementVNode("path", { d: "M23 7h2v2h-2zM23 39h2v2h-2zM41 23v2h-2v-2zM9 23v2H7v-2zM36.73 35.313l-1.415 1.415-1.414-1.415 1.414-1.414zM14.099 12.686l-1.414 1.415-1.414-1.415 1.414-1.414zM12.687 36.728l-1.414-1.415 1.414-1.414 1.414 1.414zM35.314 14.1 33.9 12.686l1.414-1.414 1.415 1.414z" }, null, -1), e.createElementVNode("path", { fill: "currentColor", stroke: "none", d: "M23 7h2v2h-2zM23 39h2v2h-2zM41 23v2h-2v-2zM9 23v2H7v-2zM36.73 35.313l-1.415 1.415-1.414-1.415 1.414-1.414zM14.099 12.686l-1.414 1.415-1.414-1.415 1.414-1.414zM12.687 36.728l-1.414-1.415 1.414-1.414 1.414 1.414zM35.314 14.1 33.9 12.686l1.414-1.414 1.415 1.414z" }, null, -1)];
  var $B = o(VB, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, WB, 10, IB);
  }]]);
  const ZB = Object.assign($B, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + $B.name, $B);
  } }), zB = e.defineComponent({ name: "IconTag", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-tag`, { [`${o2}-spin`]: t2.spin }]) };
  } }), PB = ["stroke-width", "stroke-linecap", "stroke-linejoin"], qB = [e.createElementVNode("path", { d: "M24.835 6.035a1 1 0 0 1 .903-.273l12.964 2.592a1 1 0 0 1 .784.785l2.593 12.963a1 1 0 0 1-.274.904L21.678 43.133a1 1 0 0 1-1.415 0L4.708 27.577a1 1 0 0 1 0-1.414L24.835 6.035Z" }, null, -1), e.createElementVNode("path", { d: "M31.577 17.346a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z" }, null, -1), e.createElementVNode("path", { d: "M31.582 17.349a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var OB = o(zB, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, qB, 10, PB);
  }]]);
  const HB = Object.assign(OB, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + OB.name, OB);
  } }), FB = e.defineComponent({ name: "IconTags", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-tags`, { [`${o2}-spin`]: t2.spin }]) };
  } }), AB = ["stroke-width", "stroke-linecap", "stroke-linejoin"], DB = [e.createElementVNode("path", { d: "m37.581 28.123-14.849 14.85a1 1 0 0 1-1.414 0L8.59 30.243m25.982-22.68-10.685-.628a1 1 0 0 0-.766.291L9.297 21.052a1 1 0 0 0 0 1.414L20.61 33.78a1 1 0 0 0 1.415 0l13.824-13.825a1 1 0 0 0 .291-.765l-.628-10.686a1 1 0 0 0-.94-.94Zm-6.874 7.729a1 1 0 1 1 1.414-1.414 1 1 0 0 1-1.414 1.414Z" }, null, -1), e.createElementVNode("path", { d: "M27.697 15.292a1 1 0 1 1 1.414-1.414 1 1 0 0 1-1.414 1.414Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var RB = o(FB, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, DB, 10, AB);
  }]]);
  const TB = Object.assign(RB, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + RB.name, RB);
  } }), UB = e.defineComponent({ name: "IconThunderbolt", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-thunderbolt`, { [`${o2}-spin`]: t2.spin }]) };
  } }), QB = ["stroke-width", "stroke-linecap", "stroke-linejoin"], GB = [e.createElementVNode("path", { d: "M27.824 5.203A.1.1 0 0 1 28 5.27V21h10.782a.1.1 0 0 1 .075.165L20.176 42.797A.1.1 0 0 1 20 42.73V27H9.219a.1.1 0 0 1-.076-.165L27.824 5.203Z" }, null, -1)];
  var XB = o(UB, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, GB, 10, QB);
  }]]);
  const JB = Object.assign(XB, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + XB.name, XB);
  } }), KB = e.defineComponent({ name: "IconTool", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-tool`, { [`${o2}-spin`]: t2.spin }]) };
  } }), YB = ["stroke-width", "stroke-linecap", "stroke-linejoin"], _B = [e.createElementVNode("path", { d: "M19.994 11.035c3.66-3.659 9.094-4.46 13.531-2.405a.1.1 0 0 1 .028.16l-6.488 6.488a1 1 0 0 0 0 1.414l4.243 4.243a1 1 0 0 0 1.414 0l6.488-6.488a.1.1 0 0 1 .16.028c2.056 4.437 1.254 9.872-2.405 13.53-3.695 3.696-9.2 4.477-13.66 2.347L12.923 40.733a1 1 0 0 1-1.414 0L7.266 36.49a1 1 0 0 1 0-1.414l10.382-10.382c-2.13-4.46-1.349-9.965 2.346-13.66Z" }, null, -1)];
  var eC = o(KB, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, _B, 10, YB);
  }]]);
  const tC = Object.assign(eC, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + eC.name, eC);
  } }), nC = e.defineComponent({ name: "IconTrophy", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-trophy`, { [`${o2}-spin`]: t2.spin }]) };
  } }), oC = ["stroke-width", "stroke-linecap", "stroke-linejoin"], rC = [e.createElementVNode("path", { d: "M24 33c-6.075 0-11-4.925-11-11m11 11c6.075 0 11-4.925 11-11M24 33v8M13 22V7h22v15m-22 0V9H7v7a6 6 0 0 0 6 6Zm22 0V9h6v7a6 6 0 0 1-6 6ZM12 41h24" }, null, -1)];
  var iC = o(nC, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, rC, 10, oC);
  }]]);
  const sC = Object.assign(iC, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + iC.name, iC);
  } }), lC = e.defineComponent({ name: "IconUnlock", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-unlock`, { [`${o2}-spin`]: t2.spin }]) };
  } }), cC = ["stroke-width", "stroke-linecap", "stroke-linejoin"], aC = [e.createElementVNode("rect", { x: "7", y: "21", width: "34", height: "20", rx: "1" }, null, -1), e.createElementVNode("path", { d: "M33 15a9 9 0 1 0-18 0v6M24 36V26" }, null, -1)];
  var pC = o(lC, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, aC, 10, cC);
  }]]);
  const dC = Object.assign(pC, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + pC.name, pC);
  } }), uC = e.defineComponent({ name: "IconUserAdd", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-user-add`, { [`${o2}-spin`]: t2.spin }]) };
  } }), kC = ["stroke-width", "stroke-linecap", "stroke-linejoin"], mC = [e.createElementVNode("path", { d: "M25 27h-8c-5.523 0-10 4.477-10 10v4h18m11-14v8m0 0v8m0-8h8m-8 0h-8m3-21a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z" }, null, -1)];
  var vC = o(uC, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, mC, 10, kC);
  }]]);
  const hC = Object.assign(vC, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + vC.name, vC);
  } }), fC = e.defineComponent({ name: "IconUserGroup", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-user-group`, { [`${o2}-spin`]: t2.spin }]) };
  } }), wC = ["stroke-width", "stroke-linecap", "stroke-linejoin"], gC = [e.createElementVNode("circle", { cx: "18", cy: "15", r: "7" }, null, -1), e.createElementVNode("circle", { cx: "34", cy: "19", r: "4" }, null, -1), e.createElementVNode("path", { d: "M6 34a6 6 0 0 1 6-6h12a6 6 0 0 1 6 6v6H6v-6ZM34 30h4a4 4 0 0 1 4 4v4h-8" }, null, -1)];
  var bC = o(fC, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, gC, 10, wC);
  }]]);
  const jC = Object.assign(bC, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + bC.name, bC);
  } }), LC = e.defineComponent({ name: "IconUser", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-user`, { [`${o2}-spin`]: t2.spin }]) };
  } }), BC = ["stroke-width", "stroke-linecap", "stroke-linejoin"], CC = [e.createElementVNode("path", { d: "M7 37c0-4.97 4.03-8 9-8h16c4.97 0 9 3.03 9 8v3a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-3Z" }, null, -1), e.createElementVNode("circle", { cx: "24", cy: "15", r: "8" }, null, -1)];
  var yC = o(LC, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, CC, 10, BC);
  }]]);
  const xC = Object.assign(yC, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + yC.name, yC);
  } }), EC = e.defineComponent({ name: "IconVideoCamera", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-video-camera`, { [`${o2}-spin`]: t2.spin }]) };
  } }), SC = ["stroke-width", "stroke-linecap", "stroke-linejoin"], MC = [e.createElementVNode("path", { d: "M33 18v12m0-12v-6a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v24a1 1 0 0 0 1 1h25a1 1 0 0 0 1-1v-6m0-12 8.713-2.614a1 1 0 0 1 1.287.958v15.312a1 1 0 0 1-1.287.958L33 30M11 19h6" }, null, -1)];
  var NC = o(EC, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, MC, 10, SC);
  }]]);
  const VC = Object.assign(NC, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + NC.name, NC);
  } }), IC = e.defineComponent({ name: "IconWifi", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-wifi`, { [`${o2}-spin`]: t2.spin }]) };
  } }), WC = ["stroke-width", "stroke-linecap", "stroke-linejoin"], $C = [e.createElementVNode("path", { d: "M31.587 31.485A9.978 9.978 0 0 0 24 28a9.977 9.977 0 0 0-7.586 3.485M37.255 25.822A17.953 17.953 0 0 0 24 20a17.953 17.953 0 0 0-13.256 5.822M43.618 19.449C38.696 14.246 31.728 11 24 11c-7.727 0-14.696 3.246-19.617 8.449" }, null, -1), e.createElementVNode("path", { d: "M27.535 35.465a5 5 0 0 0-7.07 0L24 39l3.535-3.535Z", fill: "currentColor", stroke: "none" }, null, -1)];
  var ZC = o(IC, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, $C, 10, WC);
  }]]);
  const zC = Object.assign(ZC, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + ZC.name, ZC);
  } }), PC = e.defineComponent({ name: "IconWoman", props: { strokeWidth: { type: Number, default: 4 }, strokeLinecap: { type: String, default: "butt", validator: (e2) => ["butt", "round", "square"].includes(e2) }, strokeLinejoin: { type: String, default: "miter", validator: (e2) => ["arcs", "bevel", "miter", "miter-clip", "round"].includes(e2) }, spin: Boolean }, setup(t2) {
    const o2 = n("icon");
    return { cls: e.computed(() => [o2, `${o2}-woman`, { [`${o2}-spin`]: t2.spin }]) };
  } }), qC = ["stroke-width", "stroke-linecap", "stroke-linejoin"], OC = [e.createElementVNode("path", { d: "M24 29c6.075 0 11-4.925 11-11S30.075 7 24 7s-11 4.925-11 11 4.925 11 11 11Zm0 0v15M15 36h18" }, null, -1)];
  var HC = o(PC, [["render", function(t2, n2, o2, r2, i2, s2) {
    return e.openBlock(), e.createElementBlock("svg", { viewBox: "0 0 48 48", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "currentColor", class: e.normalizeClass(t2.cls), "stroke-width": t2.strokeWidth, "stroke-linecap": t2.strokeLinecap, "stroke-linejoin": t2.strokeLinejoin }, OC, 10, qC);
  }]]);
  const FC = { IconArrowDown: c, IconArrowFall: k, IconArrowLeft: w, IconArrowRight: B, IconArrowRise: S, IconArrowUp: W, IconCaretDown: q, IconCaretLeft: D, IconCaretRight: G, IconCaretUp: _, IconDoubleDown: re, IconDoubleLeft: ae, IconDoubleRight: me, IconDoubleUp: ge, IconDownCircle: Ce, IconDown: Me, IconDragArrow: $e, IconExpand: Oe, IconLeftCircle: Re, IconLeft: Xe, IconMenuFold: et, IconMenuUnfold: it, IconRightCircle: pt, IconRight: vt, IconRotateLeft: bt, IconRotateRight: yt, IconShrink: Nt, IconSwap: Zt, IconToBottom: Ht, IconToLeft: Tt, IconToRight: Jt, IconToTop: tn, IconUpCircle: ln, IconUp: un, IconCheckCircleFill: fn, IconCloseCircleFill: Ln, IconExclamationCircleFill: En, IconExclamationPolygonFill: In, IconInfoCircleFill: Pn, IconMinusCircleFill: An, IconPlusCircleFill: Qn, IconQuestionCircleFill: Yn, IconCheckCircle: oo, IconCheckSquare: co, IconCheck: mo, IconClockCircle: go, IconCloseCircle: Co, IconClose: Mo, IconExclamationCircle: $o, IconExclamation: Oo, IconInfoCircle: Ro, IconInfo: Xo, IconMinusCircle: er, IconMinus: ir, IconPlusCircle: pr, IconPlus: vr, IconQuestionCircle: br, IconQuestion: yr, IconStop: Nr, IconHeartFill: Zr, IconStarFill: Hr, IconThumbDownFill: Tr, IconThumbUpFill: Jr, IconAt: ti, IconCloudDownload: si, IconCodeBlock: di, IconCodeSquare: hi, IconCode: ji, IconCustomerService: xi, IconDownload: Vi, IconExport: zi, IconEyeInvisible: Fi, IconEye: Ui, IconHeart: Ki, IconHistory: ns, IconHome: ls, IconImport: us, IconList: fs, IconMessageBanned: Ls, IconMessage: Es, IconMoreVertical: Is, IconMore: Ps, IconPoweroff: As, IconRefresh: Qs, IconReply: Ys, IconSave: ol, IconScan: cl, IconSearch: kl, IconSelectAll: wl, IconSend: Bl, IconSettings: Sl, IconShareAlt: Wl, IconShareExternal: ql, IconShareInternal: Dl, IconStar: Gl, IconSync: _l, IconThumbDown: rc, IconThumbUp: ac, IconTranslate: mc, IconUpload: gc, IconVoice: Cc, IconAlignCenter: Mc, IconAlignLeft: $c, IconAlignRight: Oc, IconBgColors: Rc, IconBold: Xc, IconBrush: ea, IconCopy: ia, IconDelete: pa, IconEdit: va, IconEraser: ba, IconFilter: ya, IconFindReplace: Na, IconFontColors: Za, IconFormula: Ha, IconH1: Ta, IconH2: Ja, IconH3: tp, IconH4: sp, IconH5: dp, IconH6: hp, IconH7: jp, IconHighlight: xp, IconItalic: Vp, IconLineHeight: zp, IconLink: Fp, IconObliqueLine: Up, IconOrderedList: Kp, IconOriginalSize: nd, IconPaste: ld, IconQuote: ud, IconRedo: fd, IconScissor: Ld, IconSortAscending: Ed, IconSortDescending: Id, IconSort: Pd, IconStrikethrough: Ad, IconUnderline: Qd, IconUndo: Yd, IconUnorderedList: ou, IconZoomIn: cu, IconZoomOut: ku, IconMuteFill: wu, IconPauseCircleFill: Bu, IconPlayArrowFill: Su, IconPlayCircleFill: Wu, IconSkipNextFill: qu, IconSkipPreviousFill: Du, IconSoundFill: Gu, IconBackward: _u, IconForward: rk, IconFullscreenExit: ak, IconFullscreen: mk, IconLiveBroadcast: gk, IconMusic: Ck, IconMute: Mk, IconPauseCircle: $k, IconPause: Ok, IconPlayArrow: Rk, IconPlayCircle: Xk, IconRecordStop: em, IconRecord: im, IconSkipNext: pm, IconSkipPrevious: vm, IconSound: bm, IconBytedanceColor: ym, IconLarkColor: Nm, IconTiktokColor: Zm, IconXiguaColor: Hm, IconFaceBookCircleFill: Tm, IconFacebookSquareFill: Jm, IconGoogleCircleFill: tv, IconQqCircleFill: sv, IconTwitterCircleFill: dv, IconWeiboCircleFill: hv, IconAlipayCircle: jv, IconCodeSandbox: xv, IconCodepen: Vv, IconFacebook: zv, IconGithub: Fv, IconGitlab: Uv, IconGoogle: Kv, IconQqZone: nh, IconQq: lh, IconTwitter: uh, IconWechat: fh, IconWechatpay: Lh, IconWeibo: Eh, IconChineseFill: Ih, IconEnglishFill: Ph, IconFaceFrownFill: Ah, IconFaceMehFill: Qh, IconFaceSmileFill: Yh, IconMoonFill: of, IconPenFill: af, IconSunFill: mf, IconApps: gf, IconBook: Cf, IconBranch: Mf, IconBug: $f, IconBulb: Of, IconCalendar: Rf, IconCamera: Xf, IconCloud: ew, IconCommand: iw, IconCommon: pw, IconCompass: vw, IconCopyright: bw, IconDashboard: yw, IconDesktop: Nw, IconDice: Zw, IconDragDotVertical: Hw, IconDragDot: Tw, IconDriveFile: Jw, IconEar: tg, IconEmail: sg, IconEmpty: dg, IconExperiment: hg, IconFileAudio: jg, IconFileImage: xg, IconFilePdf: Vg, IconFileVideo: zg, IconFile: Fg, IconFire: Ug, IconFolderAdd: Kg, IconFolderDelete: nb, IconFolder: lb, IconGift: ub, IconIdcard: fb, IconImageClose: Lb, IconImage: Eb, IconInteraction: Ib, IconLanguage: Pb, IconLayout: Ab, IconLoading: Qb, IconLocation: Yb, IconLock: oj, IconLoop: cj, IconMan: kj, IconMenu: wj, IconMindMapping: Bj, IconMobile: Sj, IconMoon: Wj, IconMosaic: qj, IconNav: Dj, IconNotificationClose: Gj, IconNotification: _j, IconPen: rL, IconPhone: aL, IconPrinter: mL, IconPublic: gL, IconPushpin: CL, IconQrcode: ML, IconRobotAdd: $L, IconRobot: OL, IconSafe: RL, IconSchedule: XL, IconShake: eB, IconSkin: iB, IconStamp: pB, IconStorage: vB, IconSubscribeAdd: bB, IconSubscribe: yB, IconSubscribed: NB, IconSun: ZB, IconTag: HB, IconTags: TB, IconThunderbolt: JB, IconTool: tC, IconTrophy: sC, IconUnlock: dC, IconUserAdd: hC, IconUserGroup: jC, IconUser: xC, IconVideoCamera: VC, IconWifi: zC, IconWoman: Object.assign(HC, { install: (e2, t2) => {
    var _a2;
    const n2 = (_a2 = t2 == null ? void 0 : t2.iconPrefix) != null ? _a2 : "";
    e2.component(n2 + HC.name, HC);
  } }) };
  return __spreadProps(__spreadValues({}, FC), { install: (e2, t2) => {
    for (const n2 of Object.keys(FC))
      e2.use(FC[n2], t2);
  } });
});
//# sourceMappingURL=arco-vue-icon.min.js.map
